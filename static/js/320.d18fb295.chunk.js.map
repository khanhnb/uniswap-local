{"version":3,"file":"static/js/320.d18fb295.chunk.js","mappings":"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","sources":["components/earn/styled.tsx","components/swap/UnsupportedCurrencyFooter.tsx","components/addLiquidity/OwnershipWarning.tsx","utils/addressesAreEquivalent.ts","components/PositionPreview/index.tsx","components/RangeSelector/PresetsButtons.tsx","utils/approveAmountCalldata.ts","pages/AddLiquidity/Review.tsx","pages/AddLiquidity/index.tsx","hooks/useDerivedPositionInfo.ts","hooks/useArgentWalletContract.ts"],"sourcesContent":["import styled from 'styled-components'\n\nimport uImage from '../../assets/images/big_unicorn.png'\nimport noise from '../../assets/images/noise.png'\nimport { AutoColumn } from '../Column'\n\nexport const DataCard = styled(AutoColumn)<{ disabled?: boolean }>`\n  background: radial-gradient(76.02% 75.41% at 1.84% 0%, #000000 0%, #2172e5 100%);\n  border-radius: 12px;\n  width: 100%;\n  position: relative;\n  overflow: hidden;\n`\n\nexport const CardBGImage = styled.span<{ desaturate?: boolean }>`\n  background: url(${uImage});\n  width: 1000px;\n  height: 600px;\n  position: absolute;\n  border-radius: 12px;\n  opacity: 0.4;\n  top: -100px;\n  left: -100px;\n  transform: rotate(-15deg);\n  user-select: none;\n  ${({ desaturate }) => desaturate && `filter: saturate(0)`}\n`\n\nexport const CardNoise = styled.span`\n  background: url(${noise});\n  background-size: cover;\n  mix-blend-mode: overlay;\n  border-radius: 12px;\n  width: 100%;\n  height: 100%;\n  opacity: 0.15;\n  position: absolute;\n  top: 0;\n  left: 0;\n  user-select: none;\n`\n\nexport const CardSection = styled(AutoColumn)<{ disabled?: boolean }>`\n  padding: 1rem;\n  z-index: 1;\n  opacity: ${({ disabled }) => disabled && '0.4'};\n`\n\nexport const Break = styled.div`\n  width: 100%;\n  background-color: rgba(255, 255, 255, 0.2);\n  height: 1px;\n`\n","import { Trans } from '@lingui/macro'\nimport { Currency } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { ButtonEmpty } from 'components/Button'\nimport Card, { OutlineCard } from 'components/Card'\nimport { AutoColumn } from 'components/Column'\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\nimport Modal from 'components/Modal'\nimport { AutoRow, RowBetween } from 'components/Row'\nimport { useState } from 'react'\nimport styled from 'styled-components'\nimport { CloseIcon, ExternalLink, ThemedText } from 'theme/components'\nimport { Z_INDEX } from 'theme/zIndex'\n\nimport { useUnsupportedTokens } from '../../hooks/Tokens'\nimport { ExplorerDataType, getExplorerLink } from '../../utils/getExplorerLink'\n\nconst DetailsFooter = styled.div<{ show: boolean }>`\n  padding-top: calc(16px + 2rem);\n  padding-bottom: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: -2rem;\n  width: 100%;\n  max-width: 400px;\n  border-bottom-left-radius: 20px;\n  border-bottom-right-radius: 20px;\n  color: ${({ theme }) => theme.neutral2};\n  background-color: ${({ theme }) => theme.surface2};\n  z-index: ${Z_INDEX.deprecated_zero};\n\n  transform: ${({ show }) => (show ? 'translateY(0%)' : 'translateY(-100%)')};\n  transition: transform 300ms ease-in-out;\n  text-align: center;\n`\n\nconst StyledButtonEmpty = styled(ButtonEmpty)`\n  text-decoration: none;\n`\n\nconst AddressText = styled(ThemedText.DeprecatedBlue)`\n  font-size: 12px;\n\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\n    font-size: 10px;\n`}\n`\n\nexport default function UnsupportedCurrencyFooter({\n  show,\n  currencies,\n}: {\n  show: boolean\n  currencies: (Currency | undefined | null)[]\n}) {\n  const { chainId } = useWeb3React()\n  const [showDetails, setShowDetails] = useState(false)\n\n  const tokens =\n    chainId && currencies\n      ? currencies.map((currency) => {\n          return currency?.wrapped\n        })\n      : []\n\n  const unsupportedTokens = useUnsupportedTokens()\n\n  return (\n    <DetailsFooter show={show}>\n      <Modal isOpen={showDetails} onDismiss={() => setShowDetails(false)}>\n        <Card padding=\"2rem\">\n          <AutoColumn gap=\"lg\">\n            <RowBetween>\n              <ThemedText.DeprecatedMediumHeader>\n                <Trans>Unsupported assets</Trans>\n              </ThemedText.DeprecatedMediumHeader>\n              <CloseIcon onClick={() => setShowDetails(false)} data-testid=\"close-icon\" />\n            </RowBetween>\n            {tokens.map((token) => {\n              return (\n                token &&\n                unsupportedTokens &&\n                Object.keys(unsupportedTokens).includes(token.address) && (\n                  <OutlineCard key={token.address?.concat('not-supported')} data-testid=\"unsupported-token-card\">\n                    <AutoColumn gap=\"10px\">\n                      <AutoRow gap=\"5px\" align=\"center\">\n                        <CurrencyLogo currency={token} size=\"24px\" />\n                        <ThemedText.DeprecatedBody fontWeight={535}>{token.symbol}</ThemedText.DeprecatedBody>\n                      </AutoRow>\n                      {chainId && (\n                        <ExternalLink href={getExplorerLink(chainId, token.address, ExplorerDataType.ADDRESS)}>\n                          <AddressText>{token.address}</AddressText>\n                        </ExternalLink>\n                      )}\n                    </AutoColumn>\n                  </OutlineCard>\n                )\n              )\n            })}\n            <AutoColumn gap=\"lg\">\n              <ThemedText.DeprecatedBody fontWeight={535}>\n                <Trans>\n                  Some assets are not available through this interface because they may not work well with the smart\n                  contracts or we are unable to allow trading for legal reasons.\n                </Trans>\n              </ThemedText.DeprecatedBody>\n            </AutoColumn>\n          </AutoColumn>\n        </Card>\n      </Modal>\n      <StyledButtonEmpty padding=\"0\" onClick={() => setShowDetails(true)} data-testid=\"read-more-button\">\n        <ThemedText.DeprecatedBlue>\n          <Trans>Read more about unsupported assets</Trans>\n        </ThemedText.DeprecatedBlue>\n      </StyledButtonEmpty>\n    </DetailsFooter>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { AlertTriangle } from 'react-feather'\nimport styled from 'styled-components'\nimport { ThemedText } from 'theme/components'\n\nconst ExplainerText = styled.div`\n  color: ${({ theme }) => theme.neutral2};\n`\nconst TitleRow = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  color: ${({ theme }) => theme.deprecated_accentWarning};\n  margin-bottom: 8px;\n`\nconst Wrapper = styled.div`\n  background-color: ${({ theme }) => theme.deprecated_accentWarningSoft};\n  border-radius: 16px;\n  margin-top: 12px;\n  max-width: 480px;\n  padding: 12px 20px;\n  width: 100%;\n`\n\ninterface OwnershipWarningProps {\n  ownerAddress: string\n}\n\nconst OwnershipWarning = ({ ownerAddress }: OwnershipWarningProps) => (\n  <Wrapper>\n    <TitleRow>\n      <AlertTriangle style={{ marginRight: '8px' }} />\n      <ThemedText.SubHeader color=\"deprecated_accentWarning\">\n        <Trans>Warning</Trans>\n      </ThemedText.SubHeader>\n    </TitleRow>\n    <ExplainerText>\n      <Trans>\n        You are not the owner of this LP position. You will not be able to withdraw the liquidity from this position\n        unless you own the following address: {ownerAddress}\n      </Trans>\n    </ExplainerText>\n  </Wrapper>\n)\n\nexport default OwnershipWarning\n","export function addressesAreEquivalent(a: string | null | undefined, b: string | null | undefined) {\n  if (!a || !b) return false\n  return a === b || a.toLowerCase() === b.toLowerCase()\n}\n","import { Trans } from '@lingui/macro'\nimport { Currency } from '@uniswap/sdk-core'\nimport { Position } from '@uniswap/v3-sdk'\nimport RangeBadge from 'components/Badge/RangeBadge'\nimport { LightCard } from 'components/Card'\nimport { AutoColumn } from 'components/Column'\nimport DoubleCurrencyLogo from 'components/DoubleLogo'\nimport { Break } from 'components/earn/styled'\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\nimport RateToggle from 'components/RateToggle'\nimport { RowBetween, RowFixed } from 'components/Row'\nimport JSBI from 'jsbi'\nimport { ReactNode, useCallback, useState } from 'react'\nimport { Bound } from 'state/mint/v3/actions'\nimport { useTheme } from 'styled-components'\nimport { ThemedText } from 'theme/components'\nimport { useFormatter } from 'utils/formatNumbers'\nimport { unwrappedToken } from 'utils/unwrappedToken'\n\nexport const PositionPreview = ({\n  position,\n  title,\n  inRange,\n  baseCurrencyDefault,\n  ticksAtLimit,\n}: {\n  position: Position\n  title?: ReactNode\n  inRange: boolean\n  baseCurrencyDefault?: Currency\n  ticksAtLimit: { [bound: string]: boolean | undefined }\n}) => {\n  const theme = useTheme()\n  const { formatTickPrice } = useFormatter()\n\n  const currency0 = unwrappedToken(position.pool.token0)\n  const currency1 = unwrappedToken(position.pool.token1)\n\n  // track which currency should be base\n  const [baseCurrency, setBaseCurrency] = useState(\n    baseCurrencyDefault\n      ? baseCurrencyDefault === currency0\n        ? currency0\n        : baseCurrencyDefault === currency1\n        ? currency1\n        : currency0\n      : currency0\n  )\n\n  const sorted = baseCurrency === currency0\n  const quoteCurrency = sorted ? currency1 : currency0\n\n  const price = sorted ? position.pool.priceOf(position.pool.token0) : position.pool.priceOf(position.pool.token1)\n\n  const priceLower = sorted ? position.token0PriceLower : position.token0PriceUpper.invert()\n  const priceUpper = sorted ? position.token0PriceUpper : position.token0PriceLower.invert()\n\n  const handleRateChange = useCallback(() => {\n    setBaseCurrency(quoteCurrency)\n  }, [quoteCurrency])\n\n  const removed = position?.liquidity && JSBI.equal(position?.liquidity, JSBI.BigInt(0))\n\n  return (\n    <AutoColumn gap=\"md\" style={{ marginTop: '0.5rem' }}>\n      <RowBetween style={{ marginBottom: '0.5rem' }}>\n        <RowFixed>\n          <DoubleCurrencyLogo\n            currency0={currency0 ?? undefined}\n            currency1={currency1 ?? undefined}\n            size={24}\n            margin={true}\n          />\n          <ThemedText.DeprecatedLabel ml=\"10px\" fontSize=\"24px\">\n            {currency0?.symbol} / {currency1?.symbol}\n          </ThemedText.DeprecatedLabel>\n        </RowFixed>\n        <RangeBadge removed={removed} inRange={inRange} />\n      </RowBetween>\n\n      <LightCard>\n        <AutoColumn gap=\"md\">\n          <RowBetween>\n            <RowFixed>\n              <CurrencyLogo currency={currency0} />\n              <ThemedText.DeprecatedLabel ml=\"8px\">{currency0?.symbol}</ThemedText.DeprecatedLabel>\n            </RowFixed>\n            <RowFixed>\n              <ThemedText.DeprecatedLabel mr=\"8px\">{position.amount0.toSignificant(4)}</ThemedText.DeprecatedLabel>\n            </RowFixed>\n          </RowBetween>\n          <RowBetween>\n            <RowFixed>\n              <CurrencyLogo currency={currency1} />\n              <ThemedText.DeprecatedLabel ml=\"8px\">{currency1?.symbol}</ThemedText.DeprecatedLabel>\n            </RowFixed>\n            <RowFixed>\n              <ThemedText.DeprecatedLabel mr=\"8px\">{position.amount1.toSignificant(4)}</ThemedText.DeprecatedLabel>\n            </RowFixed>\n          </RowBetween>\n          <Break />\n          <RowBetween>\n            <ThemedText.DeprecatedLabel>\n              <Trans>Fee tier</Trans>\n            </ThemedText.DeprecatedLabel>\n            <ThemedText.DeprecatedLabel>\n              <Trans>{position?.pool?.fee / 10000}%</Trans>\n            </ThemedText.DeprecatedLabel>\n          </RowBetween>\n        </AutoColumn>\n      </LightCard>\n\n      <AutoColumn gap=\"md\">\n        <RowBetween>\n          {title ? <ThemedText.DeprecatedMain>{title}</ThemedText.DeprecatedMain> : <div />}\n          <RateToggle\n            currencyA={sorted ? currency0 : currency1}\n            currencyB={sorted ? currency1 : currency0}\n            handleRateToggle={handleRateChange}\n          />\n        </RowBetween>\n\n        <RowBetween>\n          <LightCard width=\"48%\" padding=\"8px\">\n            <AutoColumn gap=\"4px\" justify=\"center\">\n              <ThemedText.DeprecatedMain fontSize=\"12px\">\n                <Trans>Min price</Trans>\n              </ThemedText.DeprecatedMain>\n              <ThemedText.DeprecatedMediumHeader textAlign=\"center\">\n                {formatTickPrice({\n                  price: priceLower,\n                  atLimit: ticksAtLimit,\n                  direction: Bound.LOWER,\n                })}\n              </ThemedText.DeprecatedMediumHeader>\n              <ThemedText.DeprecatedMain textAlign=\"center\" fontSize=\"12px\">\n                <Trans>\n                  {quoteCurrency.symbol} per {baseCurrency.symbol}\n                </Trans>\n              </ThemedText.DeprecatedMain>\n              <ThemedText.DeprecatedSmall textAlign=\"center\" color={theme.neutral3} style={{ marginTop: '4px' }}>\n                <Trans>Your position will be 100% composed of {baseCurrency?.symbol} at this price</Trans>\n              </ThemedText.DeprecatedSmall>\n            </AutoColumn>\n          </LightCard>\n\n          <LightCard width=\"48%\" padding=\"8px\">\n            <AutoColumn gap=\"4px\" justify=\"center\">\n              <ThemedText.DeprecatedMain fontSize=\"12px\">\n                <Trans>Max price</Trans>\n              </ThemedText.DeprecatedMain>\n              <ThemedText.DeprecatedMediumHeader textAlign=\"center\">\n                {formatTickPrice({\n                  price: priceUpper,\n                  atLimit: ticksAtLimit,\n                  direction: Bound.UPPER,\n                })}\n              </ThemedText.DeprecatedMediumHeader>\n              <ThemedText.DeprecatedMain textAlign=\"center\" fontSize=\"12px\">\n                <Trans>\n                  {quoteCurrency.symbol} per {baseCurrency.symbol}\n                </Trans>\n              </ThemedText.DeprecatedMain>\n              <ThemedText.DeprecatedSmall textAlign=\"center\" color={theme.neutral3} style={{ marginTop: '4px' }}>\n                <Trans>Your position will be 100% composed of {quoteCurrency?.symbol} at this price</Trans>\n              </ThemedText.DeprecatedSmall>\n            </AutoColumn>\n          </LightCard>\n        </RowBetween>\n        <LightCard padding=\"12px \">\n          <AutoColumn gap=\"4px\" justify=\"center\">\n            <ThemedText.DeprecatedMain fontSize=\"12px\">\n              <Trans>Current price</Trans>\n            </ThemedText.DeprecatedMain>\n            <ThemedText.DeprecatedMediumHeader>{`${price.toSignificant(5)} `}</ThemedText.DeprecatedMediumHeader>\n            <ThemedText.DeprecatedMain textAlign=\"center\" fontSize=\"12px\">\n              <Trans>\n                {quoteCurrency.symbol} per {baseCurrency.symbol}\n              </Trans>\n            </ThemedText.DeprecatedMain>\n          </AutoColumn>\n        </LightCard>\n      </AutoColumn>\n    </AutoColumn>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { ButtonOutlined } from 'components/Button'\nimport { AutoRow } from 'components/Row'\nimport styled from 'styled-components'\nimport { ThemedText } from 'theme/components'\n\nconst Button = styled(ButtonOutlined).attrs(() => ({\n  padding: '6px',\n  $borderRadius: '8px',\n}))`\n  color: ${({ theme }) => theme.neutral1};\n  flex: 1;\n`\n\ninterface PresetsButtonsProps {\n  onSetFullRange: () => void\n}\n\nexport default function PresetsButtons({ onSetFullRange }: PresetsButtonsProps) {\n  return (\n    <AutoRow gap=\"4px\" width=\"auto\">\n      <Button data-testid=\"set-full-range\" onClick={onSetFullRange}>\n        <ThemedText.DeprecatedBody fontSize={12}>\n          <Trans>Full range</Trans>\n        </ThemedText.DeprecatedBody>\n      </Button>\n    </AutoRow>\n  )\n}\n","import { Interface } from '@ethersproject/abi'\nimport { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nimport { Erc20Interface } from '../abis/types/Erc20'\n\nconst ERC20_INTERFACE = new Interface([\n  {\n    constant: false,\n    inputs: [\n      { name: '_spender', type: 'address' },\n      { name: '_value', type: 'uint256' },\n    ],\n    name: 'approve',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n]) as Erc20Interface\n\nexport default function approveAmountCalldata(\n  amount: CurrencyAmount<Currency>,\n  spender: string\n): { to: string; data: string; value: '0x0' } {\n  if (!amount.currency.isToken) throw new Error('Must call with an amount of token')\n  const approveData = ERC20_INTERFACE.encodeFunctionData('approve', [spender, toHex(amount.quotient)])\n  return {\n    to: amount.currency.address,\n    data: approveData,\n    value: '0x0',\n  }\n}\n","import { Currency, CurrencyAmount, Price } from '@uniswap/sdk-core'\nimport { Position } from '@uniswap/v3-sdk'\nimport { AutoColumn } from 'components/Column'\nimport { PositionPreview } from 'components/PositionPreview'\nimport styled from 'styled-components'\n\nimport { Bound, Field } from '../../state/mint/v3/actions'\n\nconst Wrapper = styled.div`\n  padding-top: 12px;\n`\n\nexport function Review({\n  position,\n  outOfRange,\n  ticksAtLimit,\n}: {\n  position?: Position\n  existingPosition?: Position\n  parsedAmounts: { [field in Field]?: CurrencyAmount<Currency> }\n  priceLower?: Price<Currency, Currency>\n  priceUpper?: Price<Currency, Currency>\n  outOfRange: boolean\n  ticksAtLimit: { [bound in Bound]?: boolean | undefined }\n}) {\n  return (\n    <Wrapper>\n      <AutoColumn gap=\"lg\">\n        {position ? (\n          <PositionPreview\n            position={position}\n            inRange={!outOfRange}\n            ticksAtLimit={ticksAtLimit}\n            title=\"Selected Range\"\n          />\n        ) : null}\n      </AutoColumn>\n    </Wrapper>\n  )\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport type { TransactionResponse } from '@ethersproject/providers'\nimport { Trans } from '@lingui/macro'\nimport { Currency, CurrencyAmount, NONFUNGIBLE_POSITION_MANAGER_ADDRESSES, Percent } from '@uniswap/sdk-core'\nimport { FeeAmount, NonfungiblePositionManager } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { useToggleAccountDrawer } from 'components/AccountDrawer'\nimport OwnershipWarning from 'components/addLiquidity/OwnershipWarning'\nimport UnsupportedCurrencyFooter from 'components/swap/UnsupportedCurrencyFooter'\nimport { isSupportedChain } from 'constants/chains'\nimport usePrevious from 'hooks/usePrevious'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport { ca } from 'make-plural'\nimport { BodyWrapper } from 'pages/AppBody'\nimport { PositionPageUnsupportedContent } from 'pages/Pool/PositionPage'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport { AlertTriangle } from 'react-feather'\nimport { useNavigate, useParams, useSearchParams } from 'react-router-dom'\nimport { Text } from 'rebass'\nimport {\n  useRangeHopCallbacks,\n  useV3DerivedMintInfo,\n  useV3MintActionHandlers,\n  useV3MintState,\n} from 'state/mint/v3/hooks'\nimport styled, { useTheme } from 'styled-components'\nimport { ThemedText } from 'theme/components'\nimport { addressesAreEquivalent } from 'utils/addressesAreEquivalent'\nimport { WrongChainError } from 'utils/errors'\n\nimport { ButtonError, ButtonLight, ButtonPrimary, ButtonText } from '../../components/Button'\nimport { BlueCard, OutlineCard, YellowCard } from '../../components/Card'\nimport { AutoColumn } from '../../components/Column'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport FeeSelector from '../../components/FeeSelector'\nimport HoverInlineText from '../../components/HoverInlineText'\nimport { AddRemoveTabs } from '../../components/NavigationTabs'\nimport { PositionPreview } from '../../components/PositionPreview'\nimport RangeSelector from '../../components/RangeSelector'\nimport PresetsButtons from '../../components/RangeSelector/PresetsButtons'\nimport RateToggle from '../../components/RateToggle'\nimport Row, { RowBetween, RowFixed } from '../../components/Row'\nimport { SwitchLocaleLink } from '../../components/SwitchLocaleLink'\nimport TransactionConfirmationModal, { ConfirmationModalContent } from '../../components/TransactionConfirmationModal'\nimport { ZERO_PERCENT } from '../../constants/misc'\nimport { WRAPPED_NATIVE_CURRENCY } from '../../constants/tokens'\nimport { useCurrency } from '../../hooks/Tokens'\nimport { ApprovalState, useApproveCallback } from '../../hooks/useApproveCallback'\nimport { useArgentWalletContract } from '../../hooks/useArgentWalletContract'\nimport { useV3NFTPositionManagerContract } from '../../hooks/useContract'\nimport { useDerivedPositionInfo } from '../../hooks/useDerivedPositionInfo'\nimport { useIsSwapUnsupported } from '../../hooks/useIsSwapUnsupported'\nimport { useStablecoinValue } from '../../hooks/useStablecoinPrice'\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline'\nimport { useV3PositionFromTokenId } from '../../hooks/useV3Positions'\nimport { Bound, Field } from '../../state/mint/v3/actions'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { TransactionInfo, TransactionType } from '../../state/transactions/types'\nimport { useUserSlippageToleranceWithDefault } from '../../state/user/hooks'\nimport approveAmountCalldata from '../../utils/approveAmountCalldata'\nimport { calculateGasMargin } from '../../utils/calculateGasMargin'\nimport { currencyId } from '../../utils/currencyId'\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\nimport { Dots } from '../Pool/styled'\nimport { Review } from './Review'\nimport { DynamicSection, MediumOnly, ResponsiveTwoColumns, ScrollablePage, StyledInput, Wrapper } from './styled'\n\nconst DEFAULT_ADD_IN_RANGE_SLIPPAGE_TOLERANCE = new Percent(50, 10_000)\n\nconst StyledBodyWrapper = styled(BodyWrapper) <{ $hasExistingPosition: boolean }>`\n  padding: ${({ $hasExistingPosition }) => ($hasExistingPosition ? '10px' : 0)};\n  max-width: 640px;\n`\n\nexport default function AddLiquidityWrapper() {\n  const { chainId } = useWeb3React()\n  if (isSupportedChain(chainId)) {\n    return <AddLiquidity />\n  } else {\n    return <PositionPageUnsupportedContent />\n  }\n}\n\nfunction AddLiquidity() {\n  const navigate = useNavigate()\n  const {\n    currencyIdA,\n    currencyIdB,\n    feeAmount: feeAmountFromUrl,\n    tokenId,\n  } = useParams<{\n    currencyIdA?: string\n    currencyIdB?: string\n    feeAmount?: string\n    tokenId?: string\n  }>()\n  const { account, chainId, provider } = useWeb3React()\n  const theme = useTheme()\n\n  const toggleWalletDrawer = useToggleAccountDrawer() // toggle wallet when disconnected\n  const addTransaction = useTransactionAdder()\n  const positionManager = useV3NFTPositionManagerContract()\n\n  // check for existing position if tokenId in url\n  const { position: existingPositionDetails, loading: positionLoading } = useV3PositionFromTokenId(\n    tokenId ? BigNumber.from(tokenId) : undefined\n  )\n  const hasExistingPosition = !!existingPositionDetails && !positionLoading\n  const { position: existingPosition } = useDerivedPositionInfo(existingPositionDetails)\n\n  // fee selection from url\n  const feeAmount: FeeAmount | undefined =\n    feeAmountFromUrl && Object.values(FeeAmount).includes(parseFloat(feeAmountFromUrl))\n      ? parseFloat(feeAmountFromUrl)\n      : undefined\n\n  const baseCurrency = useCurrency(currencyIdA)\n  const currencyB = useCurrency(currencyIdB)\n  // prevent an error if they input ETH/WETH\n  const quoteCurrency =\n    baseCurrency && currencyB && baseCurrency.wrapped.equals(currencyB.wrapped) ? undefined : currencyB\n\n  // mint state\n  const { independentField, typedValue, startPriceTypedValue } = useV3MintState()\n\n  const {\n    pool,\n    ticks,\n    dependentField,\n    price,\n    pricesAtTicks,\n    pricesAtLimit,\n    parsedAmounts,\n    currencyBalances,\n    position,\n    noLiquidity,\n    currencies,\n    errorMessage,\n    invalidPool,\n    invalidRange,\n    outOfRange,\n    depositADisabled,\n    depositBDisabled,\n    invertPrice,\n    ticksAtLimit,\n  } = useV3DerivedMintInfo(\n    baseCurrency ?? undefined,\n    quoteCurrency ?? undefined,\n    feeAmount,\n    baseCurrency ?? undefined,\n    existingPosition\n  )\n\n  const { onFieldAInput, onFieldBInput, onLeftRangeInput, onRightRangeInput, onStartPriceInput } =\n    useV3MintActionHandlers(noLiquidity)\n\n  const isValid = !errorMessage && !invalidRange\n\n  // modal and loading\n  const [showConfirm, setShowConfirm] = useState<boolean>(false)\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false) // clicked confirm\n\n  // txn values\n  const deadline = useTransactionDeadline() // custom from users settings\n\n  const [txHash, setTxHash] = useState<string>('')\n\n  // get formatted amounts\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: parsedAmounts[dependentField]?.toSignificant(6) ?? '',\n  }\n\n  const usdcValues = {\n    [Field.CURRENCY_A]: useStablecoinValue(parsedAmounts[Field.CURRENCY_A]),\n    [Field.CURRENCY_B]: useStablecoinValue(parsedAmounts[Field.CURRENCY_B]),\n  }\n\n  // get the max amounts user can add\n  const maxAmounts: { [field in Field]?: CurrencyAmount<Currency> } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmountSpend(currencyBalances[field]),\n      }\n    },\n    {}\n  )\n\n  const atMaxAmounts: { [field in Field]?: CurrencyAmount<Currency> } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmounts[field]?.equalTo(parsedAmounts[field] ?? '0'),\n      }\n    },\n    {}\n  )\n\n  const argentWalletContract = useArgentWalletContract()\n\n  // check whether the user has approved the router on the tokens\n  // const [approvalA, approveACallback] = useApproveCallback(\n  //   argentWalletContract ? undefined : parsedAmounts[Field.CURRENCY_A],\n  //   chainId ? NONFUNGIBLE_POSITION_MANAGER_ADDRESSES[chainId] : undefined\n  // )\n  // const [approvalB, approveBCallback] = useApproveCallback(\n  //   argentWalletContract ? undefined : parsedAmounts[Field.CURRENCY_B],\n  //   chainId ? NONFUNGIBLE_POSITION_MANAGER_ADDRESSES[chainId] : undefined\n  // )\n\n  // TODO: refactor this\n  const [approvalA, approveACallback] = useApproveCallback(\n    argentWalletContract ? undefined : parsedAmounts[Field.CURRENCY_A],\n    chainId ? \"0xfE54bceC33A57144c592b5Bbb33DfF0ef96565Cd\" : undefined\n  )\n  const [approvalB, approveBCallback] = useApproveCallback(\n    argentWalletContract ? undefined : parsedAmounts[Field.CURRENCY_B],\n    chainId ? \"0xfE54bceC33A57144c592b5Bbb33DfF0ef96565Cd\" : undefined\n  )\n\n  const allowedSlippage = useUserSlippageToleranceWithDefault(\n    outOfRange ? ZERO_PERCENT : DEFAULT_ADD_IN_RANGE_SLIPPAGE_TOLERANCE\n  )\n\n  async function onAdd() {\n    if (!chainId || !provider || !account) return\n\n    if (!positionManager || !baseCurrency || !quoteCurrency) {\n      return\n    }\n\n    if (position && account && deadline) {\n      const useNative = baseCurrency.isNative ? baseCurrency : quoteCurrency.isNative ? quoteCurrency : undefined\n      const { calldata, value } =\n        hasExistingPosition && tokenId\n          ? NonfungiblePositionManager.addCallParameters(position, {\n            tokenId,\n            slippageTolerance: allowedSlippage,\n            deadline: deadline.toString(),\n            useNative,\n          })\n          : NonfungiblePositionManager.addCallParameters(position, {\n            slippageTolerance: allowedSlippage,\n            recipient: account,\n            deadline: deadline.toString(),\n            useNative,\n            createPool: noLiquidity,\n          })\n\n      // TODO: refactor this\n      // let txn: { to: string; data: string; value: string } = {\n      //   to: NONFUNGIBLE_POSITION_MANAGER_ADDRESSES[chainId],\n      //   data: calldata,\n      //   value,\n      // }\n      let txn: { to: string; data: string; value: string } = {\n        to: \"0xAF37D5b6F34c73429e50c5573B005Ea810d0E509\",\n        data: calldata,\n        value,\n      }\n\n      if (argentWalletContract) {\n        const amountA = parsedAmounts[Field.CURRENCY_A]\n        const amountB = parsedAmounts[Field.CURRENCY_B]\n        // const batch = [\n        //   ...(amountA && amountA.currency.isToken\n        //     ? [approveAmountCalldata(amountA, NONFUNGIBLE_POSITION_MANAGER_ADDRESSES[chainId])]\n        //     : []),\n        //   ...(amountB && amountB.currency.isToken\n        //     ? [approveAmountCalldata(amountB, NONFUNGIBLE_POSITION_MANAGER_ADDRESSES[chainId])]\n        //     : []),\n        //   {\n        //     to: txn.to,\n        //     data: txn.data,\n        //     value: txn.value,\n        //   },\n        // ]\n        // TODO: refactor this\n        const batch = [\n          ...(amountA && amountA.currency.isToken\n            ? [approveAmountCalldata(amountA, \"0xfE54bceC33A57144c592b5Bbb33DfF0ef96565Cd\")]\n            : []),\n          ...(amountB && amountB.currency.isToken\n            ? [approveAmountCalldata(amountB, \"0xfE54bceC33A57144c592b5Bbb33DfF0ef96565Cd\")]\n            : []),\n          {\n            to: txn.to,\n            data: txn.data,\n            value: txn.value,\n          },\n        ]\n        const data = argentWalletContract.interface.encodeFunctionData('wc_multiCall', [batch])\n        txn = {\n          to: argentWalletContract.address,\n          data,\n          value: '0x0',\n        }\n      }\n\n      const connectedChainId = await provider.getSigner().getChainId()\n      if (chainId !== connectedChainId) throw new WrongChainError()\n\n      setAttemptingTxn(true)\n\n      const newTxn = {\n        ...txn,\n        // gasLimit: calculateGasMargin(estimate),\n        gasLimit: 10000000\n      }\n      try {\n        const a = await provider\n          .getSigner()\n          .sendTransaction(newTxn)\n          .then((response: TransactionResponse) => {\n            setAttemptingTxn(false)\n            const transactionInfo: TransactionInfo = {\n              type: TransactionType.ADD_LIQUIDITY_V3_POOL,\n              baseCurrencyId: currencyId(baseCurrency),\n              quoteCurrencyId: currencyId(quoteCurrency),\n              createPool: Boolean(noLiquidity),\n              expectedAmountBaseRaw: parsedAmounts[Field.CURRENCY_A]?.quotient?.toString() ?? '0',\n              expectedAmountQuoteRaw: parsedAmounts[Field.CURRENCY_B]?.quotient?.toString() ?? '0',\n              feeAmount: position.pool.fee,\n            }\n            addTransaction(response, transactionInfo)\n            setTxHash(response.hash)\n          })\n      } catch (error) {\n        console.error('Failed to send transaction', error)\n        setAttemptingTxn(false)\n        // we only care if the error is something _other_ than the user rejected the tx\n        if (error?.code !== 4001) {\n          console.error(error)\n        }\n      }\n\n      // provider\n      //   .getSigner()\n      //   .estimateGas(txn)\n      //   .then((estimate) => {\n      //     console.log(\"estimate: \", estimate)\n      //     const newTxn = {\n      //       ...txn,\n      //       gasLimit: calculateGasMargin(estimate),\n      //       // gasLimit: 1000000\n      //     }\n      //\n      //     return provider\n      //       .getSigner()\n      //       .sendTransaction(newTxn)\n      //       .then((response: TransactionResponse) => {\n      //         setAttemptingTxn(false)\n      //         const transactionInfo: TransactionInfo = {\n      //           type: TransactionType.ADD_LIQUIDITY_V3_POOL,\n      //           baseCurrencyId: currencyId(baseCurrency),\n      //           quoteCurrencyId: currencyId(quoteCurrency),\n      //           createPool: Boolean(noLiquidity),\n      //           expectedAmountBaseRaw: parsedAmounts[Field.CURRENCY_A]?.quotient?.toString() ?? '0',\n      //           expectedAmountQuoteRaw: parsedAmounts[Field.CURRENCY_B]?.quotient?.toString() ?? '0',\n      //           feeAmount: position.pool.fee,\n      //         }\n      //         addTransaction(response, transactionInfo)\n      //         setTxHash(response.hash)\n      //       })\n      //   })\n      //   .catch((error) => {\n      //     console.error('Failed to send transaction', error)\n      //     setAttemptingTxn(false)\n      //     // we only care if the error is something _other_ than the user rejected the tx\n      //     if (error?.code !== 4001) {\n      //       console.error(error)\n      //     }\n      //   })\n    } else {\n      return\n    }\n  }\n\n  const handleCurrencySelect = useCallback(\n    (currencyNew: Currency, currencyIdOther?: string): (string | undefined)[] => {\n      const currencyIdNew = currencyId(currencyNew)\n\n      if (currencyIdNew === currencyIdOther) {\n        // not ideal, but for now clobber the other if the currency ids are equal\n        return [currencyIdNew, undefined]\n      } else {\n        // prevent weth + eth\n        const isETHOrWETHNew =\n          currencyIdNew === 'ETH' ||\n          (chainId !== undefined && currencyIdNew === WRAPPED_NATIVE_CURRENCY[chainId]?.address)\n        const isETHOrWETHOther =\n          currencyIdOther !== undefined &&\n          (currencyIdOther === 'ETH' ||\n            (chainId !== undefined && currencyIdOther === WRAPPED_NATIVE_CURRENCY[chainId]?.address))\n\n        if (isETHOrWETHNew && isETHOrWETHOther) {\n          return [currencyIdNew, undefined]\n        } else {\n          return [currencyIdNew, currencyIdOther]\n        }\n      }\n    },\n    [chainId]\n  )\n\n  const handleCurrencyASelect = useCallback(\n    (currencyANew: Currency) => {\n      const [idA, idB] = handleCurrencySelect(currencyANew, currencyIdB)\n      if (idB === undefined) {\n        navigate(`/add/${idA}`)\n      } else {\n        navigate(`/add/${idA}/${idB}`)\n      }\n    },\n    [handleCurrencySelect, currencyIdB, navigate]\n  )\n\n  const handleCurrencyBSelect = useCallback(\n    (currencyBNew: Currency) => {\n      const [idB, idA] = handleCurrencySelect(currencyBNew, currencyIdA)\n      if (idA === undefined) {\n        navigate(`/add/${idB}`)\n      } else {\n        navigate(`/add/${idA}/${idB}`)\n      }\n    },\n    [handleCurrencySelect, currencyIdA, navigate]\n  )\n\n  const handleFeePoolSelect = useCallback(\n    (newFeeAmount: FeeAmount) => {\n      onLeftRangeInput('')\n      onRightRangeInput('')\n      navigate(`/add/${currencyIdA}/${currencyIdB}/${newFeeAmount}`)\n    },\n    [currencyIdA, currencyIdB, navigate, onLeftRangeInput, onRightRangeInput]\n  )\n\n  const handleDismissConfirmation = useCallback(() => {\n    setShowConfirm(false)\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onFieldAInput('')\n      // dont jump to pool page if creating\n      navigate('/pools')\n    }\n    setTxHash('')\n  }, [navigate, onFieldAInput, txHash])\n\n  const addIsUnsupported = useIsSwapUnsupported(currencies?.CURRENCY_A, currencies?.CURRENCY_B)\n\n  const clearAll = useCallback(() => {\n    onFieldAInput('')\n    onFieldBInput('')\n    onLeftRangeInput('')\n    onRightRangeInput('')\n    navigate(`/add`)\n  }, [navigate, onFieldAInput, onFieldBInput, onLeftRangeInput, onRightRangeInput])\n\n  // get value and prices at ticks\n  const { [Bound.LOWER]: tickLower, [Bound.UPPER]: tickUpper } = ticks\n  const { [Bound.LOWER]: priceLower, [Bound.UPPER]: priceUpper } = pricesAtTicks\n\n  const { getDecrementLower, getIncrementLower, getDecrementUpper, getIncrementUpper, getSetFullRange } =\n    useRangeHopCallbacks(baseCurrency ?? undefined, quoteCurrency ?? undefined, feeAmount, tickLower, tickUpper, pool)\n\n  // we need an existence check on parsed amounts for single-asset deposits\n  const showApprovalA =\n    !argentWalletContract && approvalA !== ApprovalState.APPROVED && !!parsedAmounts[Field.CURRENCY_A]\n  const showApprovalB =\n    !argentWalletContract && approvalB !== ApprovalState.APPROVED && !!parsedAmounts[Field.CURRENCY_B]\n\n  const pendingText = `Supplying ${!depositADisabled ? parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) : ''} ${!depositADisabled ? currencies[Field.CURRENCY_A]?.symbol : ''\n    } ${!outOfRange ? 'and' : ''} ${!depositBDisabled ? parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) : ''} ${!depositBDisabled ? currencies[Field.CURRENCY_B]?.symbol : ''\n    }`\n\n  const [searchParams, setSearchParams] = useSearchParams()\n\n  const handleSetFullRange = useCallback(() => {\n    getSetFullRange()\n\n    const minPrice = pricesAtLimit[Bound.LOWER]\n    if (minPrice) searchParams.set('minPrice', minPrice.toSignificant(5))\n    const maxPrice = pricesAtLimit[Bound.UPPER]\n    if (maxPrice) searchParams.set('maxPrice', maxPrice.toSignificant(5))\n    setSearchParams(searchParams)\n  }, [getSetFullRange, pricesAtLimit, searchParams, setSearchParams])\n\n  // START: sync values with query string\n  const oldSearchParams = usePrevious(searchParams)\n  // use query string as an input to onInput handlers\n  useEffect(() => {\n    const minPrice = searchParams.get('minPrice')\n    const oldMinPrice = oldSearchParams?.get('minPrice')\n    if (\n      minPrice &&\n      typeof minPrice === 'string' &&\n      !isNaN(minPrice as any) &&\n      (!oldMinPrice || oldMinPrice !== minPrice)\n    ) {\n      onLeftRangeInput(minPrice)\n    }\n    // disable eslint rule because this hook only cares about the url->input state data flow\n    // input state -> url updates are handled in the input handlers\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchParams])\n  useEffect(() => {\n    const maxPrice = searchParams.get('maxPrice')\n    const oldMaxPrice = oldSearchParams?.get('maxPrice')\n    if (\n      maxPrice &&\n      typeof maxPrice === 'string' &&\n      !isNaN(maxPrice as any) &&\n      (!oldMaxPrice || oldMaxPrice !== maxPrice)\n    ) {\n      onRightRangeInput(maxPrice)\n    }\n    // disable eslint rule because this hook only cares about the url->input state data flow\n    // input state -> url updates are handled in the input handlers\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchParams])\n  // END: sync values with query string\n\n  const Buttons = () =>\n    addIsUnsupported ? (\n      <ButtonPrimary disabled={true} $borderRadius=\"12px\" padding=\"12px\">\n        <ThemedText.DeprecatedMain mb=\"4px\">\n          <Trans>Unsupported Asset</Trans>\n        </ThemedText.DeprecatedMain>\n      </ButtonPrimary>\n    ) : !account ? (\n      <ButtonLight onClick={toggleWalletDrawer} $borderRadius=\"12px\" padding=\"12px\">\n        <Trans>Connect wallet</Trans>\n      </ButtonLight>\n    ) : (\n      <AutoColumn gap=\"md\">\n        {(approvalA === ApprovalState.NOT_APPROVED ||\n          approvalA === ApprovalState.PENDING ||\n          approvalB === ApprovalState.NOT_APPROVED ||\n          approvalB === ApprovalState.PENDING) &&\n          isValid && (\n            <RowBetween>\n              {showApprovalA && (\n                <ButtonPrimary\n                  onClick={approveACallback}\n                  disabled={approvalA === ApprovalState.PENDING}\n                  width={showApprovalB ? '48%' : '100%'}\n                >\n                  {approvalA === ApprovalState.PENDING ? (\n                    <Dots>\n                      <Trans>Approving {currencies[Field.CURRENCY_A]?.symbol}</Trans>\n                    </Dots>\n                  ) : (\n                    <Trans>Approve {currencies[Field.CURRENCY_A]?.symbol}</Trans>\n                  )}\n                </ButtonPrimary>\n              )}\n              {showApprovalB && (\n                <ButtonPrimary\n                  onClick={approveBCallback}\n                  disabled={approvalB === ApprovalState.PENDING}\n                  width={showApprovalA ? '48%' : '100%'}\n                >\n                  {approvalB === ApprovalState.PENDING ? (\n                    <Dots>\n                      <Trans>Approving {currencies[Field.CURRENCY_B]?.symbol}</Trans>\n                    </Dots>\n                  ) : (\n                    <Trans>Approve {currencies[Field.CURRENCY_B]?.symbol}</Trans>\n                  )}\n                </ButtonPrimary>\n              )}\n            </RowBetween>\n          )}\n        <ButtonError\n          onClick={() => {\n            setShowConfirm(true)\n          }}\n          disabled={\n            !isValid ||\n            (!argentWalletContract && approvalA !== ApprovalState.APPROVED && !depositADisabled) ||\n            (!argentWalletContract && approvalB !== ApprovalState.APPROVED && !depositBDisabled) ||\n            priceLower === undefined ||\n            priceUpper === undefined\n          }\n          error={!isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]}\n        >\n          <Text fontWeight={535}>{errorMessage ? errorMessage : <Trans>Preview</Trans>}</Text>\n        </ButtonError>\n      </AutoColumn>\n    )\n\n  const usdcValueCurrencyA = usdcValues[Field.CURRENCY_A]\n  const usdcValueCurrencyB = usdcValues[Field.CURRENCY_B]\n  const currencyAFiat = useMemo(\n    () => ({\n      data: usdcValueCurrencyA ? parseFloat(usdcValueCurrencyA.toSignificant()) : undefined,\n      isLoading: false,\n    }),\n    [usdcValueCurrencyA]\n  )\n  const currencyBFiat = useMemo(\n    () => ({\n      data: usdcValueCurrencyB ? parseFloat(usdcValueCurrencyB.toSignificant()) : undefined,\n      isLoading: false,\n    }),\n    [usdcValueCurrencyB]\n  )\n\n  const owner = useSingleCallResult(tokenId ? positionManager : null, 'ownerOf', [tokenId]).result?.[0]\n  const ownsNFT =\n    addressesAreEquivalent(owner, account) || addressesAreEquivalent(existingPositionDetails?.operator, account)\n  const showOwnershipWarning = Boolean(hasExistingPosition && account && !ownsNFT)\n\n  return (\n    <>\n      <ScrollablePage>\n        <TransactionConfirmationModal\n          isOpen={showConfirm}\n          onDismiss={handleDismissConfirmation}\n          attemptingTxn={attemptingTxn}\n          hash={txHash}\n          reviewContent={() => (\n            <ConfirmationModalContent\n              title={<Trans>Add Liquidity</Trans>}\n              onDismiss={handleDismissConfirmation}\n              topContent={() => (\n                <Review\n                  parsedAmounts={parsedAmounts}\n                  position={position}\n                  existingPosition={existingPosition}\n                  priceLower={priceLower}\n                  priceUpper={priceUpper}\n                  outOfRange={outOfRange}\n                  ticksAtLimit={ticksAtLimit}\n                />\n              )}\n              bottomContent={() => (\n                <ButtonPrimary style={{ marginTop: '1rem' }} onClick={onAdd}>\n                  <Text fontWeight={535} fontSize={20}>\n                    <Trans>Add</Trans>\n                  </Text>\n                </ButtonPrimary>\n              )}\n            />\n          )}\n          pendingText={pendingText}\n        />\n        <StyledBodyWrapper $hasExistingPosition={hasExistingPosition}>\n          <AddRemoveTabs\n            creating={false}\n            adding={true}\n            positionID={tokenId}\n            autoSlippage={DEFAULT_ADD_IN_RANGE_SLIPPAGE_TOLERANCE}\n            showBackLink={!hasExistingPosition}\n          >\n            {!hasExistingPosition && (\n              <Row justifyContent=\"flex-end\" style={{ width: 'fit-content', minWidth: 'fit-content' }}>\n                <MediumOnly>\n                  <ButtonText onClick={clearAll}>\n                    <ThemedText.DeprecatedBlue fontSize=\"12px\">\n                      <Trans>Clear all</Trans>\n                    </ThemedText.DeprecatedBlue>\n                  </ButtonText>\n                </MediumOnly>\n              </Row>\n            )}\n          </AddRemoveTabs>\n          <Wrapper>\n            <ResponsiveTwoColumns wide={!hasExistingPosition}>\n              <AutoColumn gap=\"lg\">\n                {!hasExistingPosition && (\n                  <>\n                    <AutoColumn gap=\"md\">\n                      <RowBetween paddingBottom=\"20px\">\n                        <ThemedText.DeprecatedLabel>\n                          <Trans>Select pair</Trans>\n                        </ThemedText.DeprecatedLabel>\n                      </RowBetween>\n                      <RowBetween gap=\"md\">\n                        <CurrencyInputPanel\n                          value={formattedAmounts[Field.CURRENCY_A]}\n                          onUserInput={onFieldAInput}\n                          hideInput\n                          onMax={() => {\n                            onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\n                          }}\n                          onCurrencySelect={handleCurrencyASelect}\n                          showMaxButton={!atMaxAmounts[Field.CURRENCY_A]}\n                          currency={currencies[Field.CURRENCY_A] ?? null}\n                          id=\"add-liquidity-input-tokena\"\n                          showCommonBases\n                        />\n\n                        <CurrencyInputPanel\n                          value={formattedAmounts[Field.CURRENCY_B]}\n                          hideInput\n                          onUserInput={onFieldBInput}\n                          onCurrencySelect={handleCurrencyBSelect}\n                          onMax={() => {\n                            onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\n                          }}\n                          showMaxButton={!atMaxAmounts[Field.CURRENCY_B]}\n                          currency={currencies[Field.CURRENCY_B] ?? null}\n                          id=\"add-liquidity-input-tokenb\"\n                          showCommonBases\n                        />\n                      </RowBetween>\n\n                      <FeeSelector\n                        disabled={!quoteCurrency || !baseCurrency}\n                        feeAmount={feeAmount}\n                        handleFeePoolSelect={handleFeePoolSelect}\n                      />\n                    </AutoColumn>{' '}\n                  </>\n                )}\n                {hasExistingPosition && existingPosition && (\n                  <PositionPreview\n                    position={existingPosition}\n                    title={<Trans>Selected range</Trans>}\n                    inRange={!outOfRange}\n                    ticksAtLimit={ticksAtLimit}\n                  />\n                )}\n              </AutoColumn>\n\n              {!hasExistingPosition && (\n                <>\n                  <DynamicSection gap=\"md\" disabled={!feeAmount || invalidPool}>\n                    <RowBetween>\n                      <ThemedText.DeprecatedLabel>\n                        <Trans>Set price range</Trans>\n                      </ThemedText.DeprecatedLabel>\n\n                      {Boolean(baseCurrency && quoteCurrency) && (\n                        <RowFixed gap=\"8px\">\n                          <PresetsButtons onSetFullRange={handleSetFullRange} />\n                          <RateToggle\n                            currencyA={baseCurrency as Currency}\n                            currencyB={quoteCurrency as Currency}\n                            handleRateToggle={() => {\n                              if (!ticksAtLimit[Bound.LOWER] && !ticksAtLimit[Bound.UPPER]) {\n                                onLeftRangeInput(\n                                  (invertPrice ? priceLower : priceUpper?.invert())?.toSignificant(6) ?? ''\n                                )\n                                onRightRangeInput(\n                                  (invertPrice ? priceUpper : priceLower?.invert())?.toSignificant(6) ?? ''\n                                )\n                                onFieldAInput(formattedAmounts[Field.CURRENCY_B] ?? '')\n                              }\n                              navigate(\n                                `/add/${currencyIdB as string}/${currencyIdA as string}${feeAmount ? '/' + feeAmount : ''\n                                }`\n                              )\n                            }}\n                          />\n                        </RowFixed>\n                      )}\n                    </RowBetween>\n\n                    <RangeSelector\n                      priceLower={priceLower}\n                      priceUpper={priceUpper}\n                      getDecrementLower={getDecrementLower}\n                      getIncrementLower={getIncrementLower}\n                      getDecrementUpper={getDecrementUpper}\n                      getIncrementUpper={getIncrementUpper}\n                      onLeftRangeInput={onLeftRangeInput}\n                      onRightRangeInput={onRightRangeInput}\n                      currencyA={baseCurrency}\n                      currencyB={quoteCurrency}\n                      feeAmount={feeAmount}\n                      ticksAtLimit={ticksAtLimit}\n                    />\n\n                    {outOfRange && (\n                      <YellowCard padding=\"8px 12px\" $borderRadius=\"12px\">\n                        <RowBetween>\n                          <AlertTriangle stroke={theme.deprecated_yellow3} size=\"16px\" />\n                          <ThemedText.DeprecatedYellow ml=\"12px\" fontSize=\"12px\">\n                            <Trans>\n                              Your position will not earn fees or be used in trades until the market price moves into\n                              your range.\n                            </Trans>\n                          </ThemedText.DeprecatedYellow>\n                        </RowBetween>\n                      </YellowCard>\n                    )}\n\n                    {invalidRange && (\n                      <YellowCard padding=\"8px 12px\" $borderRadius=\"12px\">\n                        <RowBetween>\n                          <AlertTriangle stroke={theme.deprecated_yellow3} size=\"16px\" />\n                          <ThemedText.DeprecatedYellow ml=\"12px\" fontSize=\"12px\">\n                            <Trans>Invalid range selected. The min price must be lower than the max price.</Trans>\n                          </ThemedText.DeprecatedYellow>\n                        </RowBetween>\n                      </YellowCard>\n                    )}\n                  </DynamicSection>\n\n                  <DynamicSection gap=\"md\" disabled={!feeAmount || invalidPool}>\n                    {!noLiquidity ? (\n                      <>\n                        {Boolean(price && baseCurrency && quoteCurrency && !noLiquidity) && (\n                          <AutoColumn gap=\"2px\" style={{ marginTop: '0.5rem' }}>\n                            <Trans>\n                              <ThemedText.DeprecatedMain fontWeight={535} fontSize={12} color=\"text1\">\n                                Current price:\n                              </ThemedText.DeprecatedMain>\n                              <ThemedText.DeprecatedBody fontWeight={535} fontSize={20} color=\"text1\">\n                                {price && (\n                                  <HoverInlineText\n                                    maxCharacters={20}\n                                    text={invertPrice ? price.invert().toSignificant(6) : price.toSignificant(6)}\n                                  />\n                                )}\n                              </ThemedText.DeprecatedBody>\n                              {baseCurrency && (\n                                <ThemedText.DeprecatedBody color=\"text2\" fontSize={12}>\n                                  {quoteCurrency?.symbol} per {baseCurrency.symbol}\n                                </ThemedText.DeprecatedBody>\n                              )}\n                            </Trans>\n                          </AutoColumn>\n                        )}\n                      </>\n                    ) : (\n                      <AutoColumn gap=\"md\">\n                        {noLiquidity && (\n                          <BlueCard\n                            style={{\n                              display: 'flex',\n                              flexDirection: 'row',\n                              alignItems: 'center',\n                              padding: '1rem 1rem',\n                            }}\n                          >\n                            <ThemedText.DeprecatedBody\n                              fontSize={14}\n                              style={{ fontWeight: 535 }}\n                              textAlign=\"left\"\n                              color={theme.accent1}\n                            >\n                              <Trans>\n                                This pool must be initialized before you can add liquidity. To initialize, select a\n                                starting price for the pool. Then, enter your liquidity price range and deposit amount.\n                                Gas fees will be higher than usual due to the initialization transaction.\n                              </Trans>\n                            </ThemedText.DeprecatedBody>\n                          </BlueCard>\n                        )}\n                        <OutlineCard padding=\"12px\">\n                          <StyledInput\n                            className=\"start-price-input\"\n                            value={startPriceTypedValue}\n                            onUserInput={onStartPriceInput}\n                          />\n                        </OutlineCard>\n                        <RowBetween\n                          style={{\n                            backgroundColor: theme.surface1,\n                            padding: '12px',\n                            borderRadius: '12px',\n                          }}\n                        >\n                          <ThemedText.DeprecatedMain>\n                            <Trans>Starting {baseCurrency?.symbol} Price:</Trans>\n                          </ThemedText.DeprecatedMain>\n                          <ThemedText.DeprecatedMain>\n                            {price ? (\n                              <ThemedText.DeprecatedMain>\n                                <RowFixed>\n                                  <HoverInlineText\n                                    maxCharacters={20}\n                                    text={invertPrice ? price?.invert()?.toSignificant(8) : price?.toSignificant(8)}\n                                  />{' '}\n                                  <span style={{ marginLeft: '4px' }}>\n                                    {quoteCurrency?.symbol} per {baseCurrency?.symbol}\n                                  </span>\n                                </RowFixed>\n                              </ThemedText.DeprecatedMain>\n                            ) : (\n                              '-'\n                            )}\n                          </ThemedText.DeprecatedMain>\n                        </RowBetween>\n                      </AutoColumn>\n                    )}\n                  </DynamicSection>\n                </>\n              )}\n              <div>\n                <DynamicSection disabled={invalidPool || invalidRange || (noLiquidity && !startPriceTypedValue)}>\n                  <AutoColumn gap=\"md\">\n                    <ThemedText.DeprecatedLabel>\n                      {hasExistingPosition ? <Trans>Add more liquidity</Trans> : <Trans>Deposit amounts</Trans>}\n                    </ThemedText.DeprecatedLabel>\n\n                    <CurrencyInputPanel\n                      value={formattedAmounts[Field.CURRENCY_A]}\n                      onUserInput={onFieldAInput}\n                      onMax={() => {\n                        onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\n                      }}\n                      showMaxButton={!atMaxAmounts[Field.CURRENCY_A]}\n                      currency={currencies[Field.CURRENCY_A] ?? null}\n                      id=\"add-liquidity-input-tokena\"\n                      fiatValue={currencyAFiat}\n                      showCommonBases\n                      locked={depositADisabled}\n                    />\n\n                    <CurrencyInputPanel\n                      value={formattedAmounts[Field.CURRENCY_B]}\n                      onUserInput={onFieldBInput}\n                      onMax={() => {\n                        onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\n                      }}\n                      showMaxButton={!atMaxAmounts[Field.CURRENCY_B]}\n                      fiatValue={currencyBFiat}\n                      currency={currencies[Field.CURRENCY_B] ?? null}\n                      id=\"add-liquidity-input-tokenb\"\n                      showCommonBases\n                      locked={depositBDisabled}\n                    />\n                  </AutoColumn>\n                </DynamicSection>\n              </div>\n              <Buttons />\n            </ResponsiveTwoColumns>\n          </Wrapper>\n        </StyledBodyWrapper>\n        {showOwnershipWarning && <OwnershipWarning ownerAddress={owner} />}\n        {addIsUnsupported && (\n          <UnsupportedCurrencyFooter\n            show={addIsUnsupported}\n            currencies={[currencies.CURRENCY_A, currencies.CURRENCY_B]}\n          />\n        )}\n      </ScrollablePage>\n      <SwitchLocaleLink />\n    </>\n  )\n}\n","import { Pool, Position } from '@uniswap/v3-sdk'\nimport { usePool } from 'hooks/usePools'\nimport { PositionDetails } from 'types/position'\n\nimport { useCurrency } from './Tokens'\n\nexport function useDerivedPositionInfo(positionDetails: PositionDetails | undefined): {\n  position?: Position\n  pool?: Pool\n} {\n  const currency0 = useCurrency(positionDetails?.token0)\n  const currency1 = useCurrency(positionDetails?.token1)\n\n  // construct pool data\n  const [, pool] = usePool(currency0 ?? undefined, currency1 ?? undefined, positionDetails?.fee)\n\n  let position = undefined\n  if (pool && positionDetails) {\n    position = new Position({\n      pool,\n      liquidity: positionDetails.liquidity.toString(),\n      tickLower: positionDetails.tickLower,\n      tickUpper: positionDetails.tickUpper,\n    })\n  }\n\n  return {\n    position,\n    pool: pool ?? undefined,\n  }\n}\n","import { useWeb3React } from '@web3-react/core'\n\nimport ArgentWalletContractABI from '../abis/argent-wallet-contract.json'\nimport { ArgentWalletContract } from '../abis/types'\nimport { useContract } from './useContract'\nimport useIsArgentWallet from './useIsArgentWallet'\n\nexport function useArgentWalletContract(): ArgentWalletContract | null {\n  const { account } = useWeb3React()\n  const isArgentWallet = useIsArgentWallet()\n  return useContract(\n    isArgentWallet ? account ?? undefined : undefined,\n    ArgentWalletContractABI,\n    true\n  ) as ArgentWalletContract\n}\n"],"names":["DataCard","styled","AutoColumn","CardBGImage","span","uImage","desaturate","CardNoise","noise","CardSection","disabled","Break","div","DetailsFooter","theme","neutral2","surface2","Z_INDEX","deprecated_zero","show","StyledButtonEmpty","ButtonEmpty","AddressText","ThemedText","DeprecatedBlue","deprecated_mediaWidth","deprecated_upToSmall","UnsupportedCurrencyFooter","currencies","chainId","useWeb3React","showDetails","setShowDetails","useState","tokens","map","currency","wrapped","unsupportedTokens","useUnsupportedTokens","Modal","isOpen","onDismiss","Card","padding","gap","RowBetween","DeprecatedMediumHeader","CloseIcon","onClick","data-testid","token","Object","keys","includes","address","OutlineCard","AutoRow","align","CurrencyLogo","size","DeprecatedBody","fontWeight","symbol","ExternalLink","href","getExplorerLink","ExplorerDataType","ADDRESS","concat","ExplainerText","TitleRow","deprecated_accentWarning","Wrapper","deprecated_accentWarningSoft","ownerAddress","AlertTriangle","style","marginRight","SubHeader","color","addressesAreEquivalent","a","b","toLowerCase","PositionPreview","position","title","inRange","baseCurrencyDefault","ticksAtLimit","useTheme","formatTickPrice","useFormatter","currency0","unwrappedToken","pool","token0","currency1","token1","baseCurrency","setBaseCurrency","sorted","quoteCurrency","price","priceOf","priceLower","token0PriceLower","token0PriceUpper","invert","priceUpper","handleRateChange","useCallback","removed","liquidity","JSBI","marginTop","marginBottom","RowFixed","DoubleCurrencyLogo","undefined","margin","DeprecatedLabel","ml","fontSize","RangeBadge","LightCard","mr","amount0","toSignificant","amount1","fee","DeprecatedMain","RateToggle","currencyA","currencyB","handleRateToggle","width","justify","textAlign","atLimit","direction","Bound","LOWER","DeprecatedSmall","neutral3","UPPER","Button","ButtonOutlined","attrs","$borderRadius","neutral1","PresetsButtons","onSetFullRange","ERC20_INTERFACE","Interface","constant","inputs","name","type","outputs","payable","stateMutability","approveAmountCalldata","amount","spender","isToken","Error","approveData","encodeFunctionData","toHex","quotient","to","data","value","Review","outOfRange","DEFAULT_ADD_IN_RANGE_SLIPPAGE_TOLERANCE","Percent","StyledBodyWrapper","BodyWrapper","$hasExistingPosition","AddLiquidityWrapper","isSupportedChain","AddLiquidity","PositionPageUnsupportedContent","navigate","useNavigate","currencyIdA","currencyIdB","feeAmount","feeAmountFromUrl","tokenId","useParams","account","provider","toggleWalletDrawer","useToggleAccountDrawer","addTransaction","useTransactionAdder","positionManager","useV3NFTPositionManagerContract","existingPositionDetails","loading","positionLoading","useV3PositionFromTokenId","BigNumber","from","hasExistingPosition","existingPosition","positionDetails","useCurrency","usePool","Position","toString","tickLower","tickUpper","useDerivedPositionInfo","values","FeeAmount","parseFloat","equals","independentField","typedValue","startPriceTypedValue","useV3MintState","ticks","dependentField","pricesAtTicks","pricesAtLimit","parsedAmounts","currencyBalances","noLiquidity","errorMessage","invalidPool","invalidRange","depositADisabled","depositBDisabled","invertPrice","useV3DerivedMintInfo","onFieldAInput","onFieldBInput","onLeftRangeInput","onRightRangeInput","onStartPriceInput","useV3MintActionHandlers","isValid","showConfirm","setShowConfirm","attemptingTxn","setAttemptingTxn","deadline","useTransactionDeadline","txHash","setTxHash","formattedAmounts","usdcValues","Field","CURRENCY_A","useStablecoinValue","CURRENCY_B","maxAmounts","reduce","accumulator","field","maxAmountSpend","atMaxAmounts","equalTo","argentWalletContract","isArgentWallet","useIsArgentWallet","useContract","ArgentWalletContractABI","useArgentWalletContract","approvalA","approveACallback","useApproveCallback","approvalB","approveBCallback","allowedSlippage","useUserSlippageToleranceWithDefault","ZERO_PERCENT","async","onAdd","useNative","isNative","calldata","NonfungiblePositionManager","addCallParameters","slippageTolerance","recipient","createPool","txn","amountA","amountB","batch","interface","connectedChainId","getSigner","getChainId","WrongChainError","newTxn","gasLimit","sendTransaction","then","response","transactionInfo","TransactionType","ADD_LIQUIDITY_V3_POOL","baseCurrencyId","currencyId","quoteCurrencyId","Boolean","expectedAmountBaseRaw","expectedAmountQuoteRaw","hash","error","console","code","handleCurrencySelect","currencyNew","currencyIdOther","currencyIdNew","isETHOrWETHNew","WRAPPED_NATIVE_CURRENCY","isETHOrWETHOther","handleCurrencyASelect","currencyANew","idA","idB","handleCurrencyBSelect","currencyBNew","handleFeePoolSelect","newFeeAmount","handleDismissConfirmation","addIsUnsupported","useIsSwapUnsupported","clearAll","getDecrementLower","getIncrementLower","getDecrementUpper","getIncrementUpper","getSetFullRange","useRangeHopCallbacks","showApprovalA","ApprovalState","APPROVED","showApprovalB","pendingText","searchParams","setSearchParams","useSearchParams","handleSetFullRange","minPrice","set","maxPrice","oldSearchParams","usePrevious","useEffect","get","oldMinPrice","isNaN","oldMaxPrice","Buttons","ButtonPrimary","mb","NOT_APPROVED","PENDING","Dots","ButtonError","Text","ButtonLight","usdcValueCurrencyA","usdcValueCurrencyB","currencyAFiat","useMemo","isLoading","currencyBFiat","owner","useSingleCallResult","result","ownsNFT","operator","showOwnershipWarning","ScrollablePage","TransactionConfirmationModal","reviewContent","ConfirmationModalContent","topContent","bottomContent","AddRemoveTabs","creating","adding","positionID","autoSlippage","showBackLink","Row","justifyContent","minWidth","MediumOnly","ButtonText","ResponsiveTwoColumns","wide","paddingBottom","CurrencyInputPanel","onUserInput","hideInput","onMax","toExact","onCurrencySelect","showMaxButton","id","showCommonBases","FeeSelector","DynamicSection","RangeSelector","YellowCard","stroke","deprecated_yellow3","DeprecatedYellow","BlueCard","display","flexDirection","alignItems","accent1","StyledInput","className","backgroundColor","surface1","borderRadius","HoverInlineText","maxCharacters","text","marginLeft","fiatValue","locked","OwnershipWarning","SwitchLocaleLink"],"sourceRoot":""}