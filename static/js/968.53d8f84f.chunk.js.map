{"version":3,"file":"static/js/968.53d8f84f.chunk.js","mappings":"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","sources":["components/swap/UnsupportedCurrencyFooter.tsx","state/mint/hooks.tsx","pages/AddLiquidityV2/ConfirmAddModalBottom.tsx","pages/AddLiquidityV2/PoolPriceBar.tsx","pages/AddLiquidityV2/index.tsx","pages/AddLiquidityV2/redirects.tsx","pages/Pool/styled.tsx","utils/calculateSlippageAmount.ts","lib/utils/formatLocaleNumber.ts","utils/formatCurrencyAmount.ts","utils/unwrappedToken.ts"],"sourcesContent":["import { Trans } from '@lingui/macro'\nimport { Currency } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { ButtonEmpty } from 'components/Button'\nimport Card, { OutlineCard } from 'components/Card'\nimport { AutoColumn } from 'components/Column'\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\nimport Modal from 'components/Modal'\nimport { AutoRow, RowBetween } from 'components/Row'\nimport { useState } from 'react'\nimport styled from 'styled-components'\nimport { CloseIcon, ExternalLink, ThemedText } from 'theme/components'\nimport { Z_INDEX } from 'theme/zIndex'\n\nimport { useUnsupportedTokens } from '../../hooks/Tokens'\nimport { ExplorerDataType, getExplorerLink } from '../../utils/getExplorerLink'\n\nconst DetailsFooter = styled.div<{ show: boolean }>`\n  padding-top: calc(16px + 2rem);\n  padding-bottom: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: -2rem;\n  width: 100%;\n  max-width: 400px;\n  border-bottom-left-radius: 20px;\n  border-bottom-right-radius: 20px;\n  color: ${({ theme }) => theme.neutral2};\n  background-color: ${({ theme }) => theme.surface2};\n  z-index: ${Z_INDEX.deprecated_zero};\n\n  transform: ${({ show }) => (show ? 'translateY(0%)' : 'translateY(-100%)')};\n  transition: transform 300ms ease-in-out;\n  text-align: center;\n`\n\nconst StyledButtonEmpty = styled(ButtonEmpty)`\n  text-decoration: none;\n`\n\nconst AddressText = styled(ThemedText.DeprecatedBlue)`\n  font-size: 12px;\n\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\n    font-size: 10px;\n`}\n`\n\nexport default function UnsupportedCurrencyFooter({\n  show,\n  currencies,\n}: {\n  show: boolean\n  currencies: (Currency | undefined | null)[]\n}) {\n  const { chainId } = useWeb3React()\n  const [showDetails, setShowDetails] = useState(false)\n\n  const tokens =\n    chainId && currencies\n      ? currencies.map((currency) => {\n          return currency?.wrapped\n        })\n      : []\n\n  const unsupportedTokens = useUnsupportedTokens()\n\n  return (\n    <DetailsFooter show={show}>\n      <Modal isOpen={showDetails} onDismiss={() => setShowDetails(false)}>\n        <Card padding=\"2rem\">\n          <AutoColumn gap=\"lg\">\n            <RowBetween>\n              <ThemedText.DeprecatedMediumHeader>\n                <Trans>Unsupported assets</Trans>\n              </ThemedText.DeprecatedMediumHeader>\n              <CloseIcon onClick={() => setShowDetails(false)} data-testid=\"close-icon\" />\n            </RowBetween>\n            {tokens.map((token) => {\n              return (\n                token &&\n                unsupportedTokens &&\n                Object.keys(unsupportedTokens).includes(token.address) && (\n                  <OutlineCard key={token.address?.concat('not-supported')} data-testid=\"unsupported-token-card\">\n                    <AutoColumn gap=\"10px\">\n                      <AutoRow gap=\"5px\" align=\"center\">\n                        <CurrencyLogo currency={token} size=\"24px\" />\n                        <ThemedText.DeprecatedBody fontWeight={535}>{token.symbol}</ThemedText.DeprecatedBody>\n                      </AutoRow>\n                      {chainId && (\n                        <ExternalLink href={getExplorerLink(chainId, token.address, ExplorerDataType.ADDRESS)}>\n                          <AddressText>{token.address}</AddressText>\n                        </ExternalLink>\n                      )}\n                    </AutoColumn>\n                  </OutlineCard>\n                )\n              )\n            })}\n            <AutoColumn gap=\"lg\">\n              <ThemedText.DeprecatedBody fontWeight={535}>\n                <Trans>\n                  Some assets are not available through this interface because they may not work well with the smart\n                  contracts or we are unable to allow trading for legal reasons.\n                </Trans>\n              </ThemedText.DeprecatedBody>\n            </AutoColumn>\n          </AutoColumn>\n        </Card>\n      </Modal>\n      <StyledButtonEmpty padding=\"0\" onClick={() => setShowDetails(true)} data-testid=\"read-more-button\">\n        <ThemedText.DeprecatedBlue>\n          <Trans>Read more about unsupported assets</Trans>\n        </ThemedText.DeprecatedBlue>\n      </StyledButtonEmpty>\n    </DetailsFooter>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { Currency, CurrencyAmount, Percent, Price, Token } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport JSBI from 'jsbi'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { ReactNode, useCallback, useMemo } from 'react'\nimport { useAppDispatch, useAppSelector } from 'state/hooks'\n\nimport { useTotalSupply } from '../../hooks/useTotalSupply'\nimport { PairState, useV2Pair } from '../../hooks/useV2Pairs'\nimport { useCurrencyBalances } from '../connection/hooks'\nimport { AppState } from '../reducer'\nimport { Field, typeInput } from './actions'\n\nconst ZERO = JSBI.BigInt(0)\n\nexport function useMintState(): AppState['mint'] {\n  return useAppSelector((state) => state.mint)\n}\n\nexport function useMintActionHandlers(noLiquidity: boolean | undefined): {\n  onFieldAInput: (typedValue: string) => void\n  onFieldBInput: (typedValue: string) => void\n} {\n  const dispatch = useAppDispatch()\n\n  const onFieldAInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_A, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity]\n  )\n\n  const onFieldBInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_B, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity]\n  )\n\n  return {\n    onFieldAInput,\n    onFieldBInput,\n  }\n}\n\nexport function useDerivedMintInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined\n): {\n  dependentField: Field\n  currencies: { [field in Field]?: Currency }\n  pair?: Pair | null\n  pairState: PairState\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\n  parsedAmounts: { [field in Field]?: CurrencyAmount<Currency> }\n  price?: Price<Currency, Currency>\n  noLiquidity?: boolean\n  liquidityMinted?: CurrencyAmount<Token>\n  poolTokenPercentage?: Percent\n  error?: ReactNode\n} {\n  const { account } = useWeb3React()\n\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n\n  const dependentField = independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A\n\n  // tokens\n  const currencies: { [field in Field]?: Currency } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: currencyA ?? undefined,\n      [Field.CURRENCY_B]: currencyB ?? undefined,\n    }),\n    [currencyA, currencyB]\n  )\n\n  // pair\n  const [pairState, pair] = useV2Pair(currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B])\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n\n  const noLiquidity: boolean =\n    pairState === PairState.NOT_EXISTS ||\n    Boolean(totalSupply && JSBI.equal(totalSupply.quotient, ZERO)) ||\n    Boolean(\n      pairState === PairState.EXISTS &&\n        pair &&\n        JSBI.equal(pair.reserve0.quotient, ZERO) &&\n        JSBI.equal(pair.reserve1.quotient, ZERO)\n    )\n\n  // balances\n  const balances = useCurrencyBalances(\n    account ?? undefined,\n    useMemo(() => [currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B]], [currencies])\n  )\n  const currencyBalances: { [field in Field]?: CurrencyAmount<Currency> } = {\n    [Field.CURRENCY_A]: balances[0],\n    [Field.CURRENCY_B]: balances[1],\n  }\n\n  // amounts\n  const independentAmount: CurrencyAmount<Currency> | undefined = tryParseCurrencyAmount(\n    typedValue,\n    currencies[independentField]\n  )\n  const dependentAmount: CurrencyAmount<Currency> | undefined = useMemo(() => {\n    if (noLiquidity) {\n      if (otherTypedValue && currencies[dependentField]) {\n        return tryParseCurrencyAmount(otherTypedValue, currencies[dependentField])\n      }\n      return undefined\n    } else if (independentAmount) {\n      // we wrap the currencies just to get the price in terms of the other token\n      const wrappedIndependentAmount = independentAmount?.wrapped\n      const [tokenA, tokenB] = [currencyA?.wrapped, currencyB?.wrapped]\n      if (tokenA && tokenB && wrappedIndependentAmount && pair) {\n        const dependentCurrency = dependentField === Field.CURRENCY_B ? currencyB : currencyA\n        const dependentTokenAmount =\n          dependentField === Field.CURRENCY_B\n            ? pair.priceOf(tokenA).quote(wrappedIndependentAmount)\n            : pair.priceOf(tokenB).quote(wrappedIndependentAmount)\n        return dependentCurrency?.isNative\n          ? CurrencyAmount.fromRawAmount(dependentCurrency, dependentTokenAmount.quotient)\n          : dependentTokenAmount\n      }\n      return undefined\n    } else {\n      return undefined\n    }\n  }, [noLiquidity, otherTypedValue, currencies, dependentField, independentAmount, currencyA, currencyB, pair])\n\n  const parsedAmounts: { [field in Field]: CurrencyAmount<Currency> | undefined } = useMemo(() => {\n    return {\n      [Field.CURRENCY_A]: independentField === Field.CURRENCY_A ? independentAmount : dependentAmount,\n      [Field.CURRENCY_B]: independentField === Field.CURRENCY_A ? dependentAmount : independentAmount,\n    }\n  }, [dependentAmount, independentAmount, independentField])\n\n  const price = useMemo(() => {\n    if (noLiquidity) {\n      const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n      if (currencyAAmount?.greaterThan(0) && currencyBAmount?.greaterThan(0)) {\n        const value = currencyBAmount.divide(currencyAAmount)\n        return new Price(currencyAAmount.currency, currencyBAmount.currency, value.denominator, value.numerator)\n      }\n      return undefined\n    } else {\n      const wrappedCurrencyA = currencyA?.wrapped\n      return pair && wrappedCurrencyA ? pair.priceOf(wrappedCurrencyA) : undefined\n    }\n  }, [currencyA, noLiquidity, pair, parsedAmounts])\n\n  // liquidity minted\n  const liquidityMinted = useMemo(() => {\n    const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n    const [tokenAmountA, tokenAmountB] = [currencyAAmount?.wrapped, currencyBAmount?.wrapped]\n    if (pair && totalSupply && tokenAmountA && tokenAmountB) {\n      try {\n        return pair.getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB)\n      } catch (error) {\n        console.error(error)\n        return undefined\n      }\n    } else {\n      return undefined\n    }\n  }, [parsedAmounts, pair, totalSupply])\n\n  const poolTokenPercentage = useMemo(() => {\n    if (liquidityMinted && totalSupply) {\n      return new Percent(liquidityMinted.quotient, totalSupply.add(liquidityMinted).quotient)\n    } else {\n      return undefined\n    }\n  }, [liquidityMinted, totalSupply])\n\n  let error: ReactNode | undefined\n  if (!account) {\n    error = <Trans>Connect wallet</Trans>\n  }\n\n  if (pairState === PairState.INVALID) {\n    error = error ?? <Trans>Invalid pair</Trans>\n  }\n\n  if (!parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    error = error ?? <Trans>Enter an amount</Trans>\n  }\n\n  const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n\n  if (currencyAAmount && currencyBalances?.[Field.CURRENCY_A]?.lessThan(currencyAAmount)) {\n    error = <Trans>Insufficient {currencies[Field.CURRENCY_A]?.symbol} balance</Trans>\n  }\n\n  if (currencyBAmount && currencyBalances?.[Field.CURRENCY_B]?.lessThan(currencyBAmount)) {\n    error = <Trans>Insufficient {currencies[Field.CURRENCY_B]?.symbol} balance</Trans>\n  }\n\n  return {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error,\n  }\n}\n","import { Trans } from '@lingui/macro'\nimport { Currency, CurrencyAmount, Fraction, Percent } from '@uniswap/sdk-core'\nimport { Text } from 'rebass'\nimport { ThemedText } from 'theme/components'\n\nimport { ButtonPrimary } from '../../components/Button'\nimport CurrencyLogo from '../../components/Logo/CurrencyLogo'\nimport { RowBetween, RowFixed } from '../../components/Row'\nimport { Field } from '../../state/mint/actions'\n\nexport function ConfirmAddModalBottom({\n  noLiquidity,\n  price,\n  currencies,\n  parsedAmounts,\n  poolTokenPercentage,\n  onAdd,\n}: {\n  noLiquidity?: boolean\n  price?: Fraction\n  currencies: { [field in Field]?: Currency }\n  parsedAmounts: { [field in Field]?: CurrencyAmount<Currency> }\n  poolTokenPercentage?: Percent\n  onAdd: () => void\n}) {\n  return (\n    <>\n      <RowBetween>\n        <ThemedText.DeprecatedBody>\n          <Trans>{currencies[Field.CURRENCY_A]?.symbol} Deposited</Trans>\n        </ThemedText.DeprecatedBody>\n        <RowFixed>\n          <CurrencyLogo currency={currencies[Field.CURRENCY_A]} style={{ marginRight: '8px' }} />\n          <ThemedText.DeprecatedBody>{parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)}</ThemedText.DeprecatedBody>\n        </RowFixed>\n      </RowBetween>\n      <RowBetween>\n        <ThemedText.DeprecatedBody>\n          <Trans>{currencies[Field.CURRENCY_B]?.symbol} Deposited</Trans>\n        </ThemedText.DeprecatedBody>\n        <RowFixed>\n          <CurrencyLogo currency={currencies[Field.CURRENCY_B]} style={{ marginRight: '8px' }} />\n          <ThemedText.DeprecatedBody>{parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)}</ThemedText.DeprecatedBody>\n        </RowFixed>\n      </RowBetween>\n      <RowBetween>\n        <ThemedText.DeprecatedBody>\n          <Trans>Rates</Trans>\n        </ThemedText.DeprecatedBody>\n        <ThemedText.DeprecatedBody>\n          {`1 ${currencies[Field.CURRENCY_A]?.symbol} = ${price?.toSignificant(4)} ${\n            currencies[Field.CURRENCY_B]?.symbol\n          }`}\n        </ThemedText.DeprecatedBody>\n      </RowBetween>\n      <RowBetween style={{ justifyContent: 'flex-end' }}>\n        <ThemedText.DeprecatedBody>\n          {`1 ${currencies[Field.CURRENCY_B]?.symbol} = ${price?.invert().toSignificant(4)} ${\n            currencies[Field.CURRENCY_A]?.symbol\n          }`}\n        </ThemedText.DeprecatedBody>\n      </RowBetween>\n      <RowBetween>\n        <ThemedText.DeprecatedBody>\n          <Trans>Share of Pool:</Trans>\n        </ThemedText.DeprecatedBody>\n        <ThemedText.DeprecatedBody>\n          <Trans>{noLiquidity ? '100' : poolTokenPercentage?.toSignificant(4)}%</Trans>\n        </ThemedText.DeprecatedBody>\n      </RowBetween>\n      <ButtonPrimary style={{ margin: '20px 0 0 0' }} onClick={onAdd}>\n        <Text fontWeight={535} fontSize={20}>\n          {noLiquidity ? <Trans>Create pool & supply</Trans> : <Trans>Confirm supply</Trans>}\n        </Text>\n      </ButtonPrimary>\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { Currency, Percent, Price } from '@uniswap/sdk-core'\nimport { Text } from 'rebass'\nimport { useTheme } from 'styled-components'\nimport { ThemedText } from 'theme/components'\n\nimport { AutoColumn } from '../../components/Column'\nimport { AutoRow } from '../../components/Row'\nimport { ONE_BIPS } from '../../constants/misc'\nimport { Field } from '../../state/mint/actions'\n\nexport function PoolPriceBar({\n  currencies,\n  noLiquidity,\n  poolTokenPercentage,\n  price,\n}: {\n  currencies: { [field in Field]?: Currency }\n  noLiquidity?: boolean\n  poolTokenPercentage?: Percent\n  price?: Price<Currency, Currency>\n}) {\n  const theme = useTheme()\n\n  let invertedPrice: string | undefined\n  try {\n    invertedPrice = price?.invert()?.toSignificant(6)\n  } catch (error) {\n    invertedPrice = undefined\n  }\n\n  return (\n    <AutoColumn gap=\"md\">\n      <AutoRow justify=\"space-around\" gap=\"4px\">\n        <AutoColumn justify=\"center\">\n          <ThemedText.DeprecatedBlack data-testid=\"currency-b-price\">\n            {price?.toSignificant(6) ?? '-'}\n          </ThemedText.DeprecatedBlack>\n          <Text fontWeight={535} fontSize={14} color={theme.neutral2} pt={1}>\n            <Trans>\n              {currencies[Field.CURRENCY_B]?.symbol} per {currencies[Field.CURRENCY_A]?.symbol}\n            </Trans>\n          </Text>\n        </AutoColumn>\n        <AutoColumn justify=\"center\">\n          <ThemedText.DeprecatedBlack data-testid=\"currency-a-price\">{invertedPrice ?? '-'}</ThemedText.DeprecatedBlack>\n          <Text fontWeight={535} fontSize={14} color={theme.neutral2} pt={1}>\n            <Trans>\n              {currencies[Field.CURRENCY_A]?.symbol} per {currencies[Field.CURRENCY_B]?.symbol}\n            </Trans>\n          </Text>\n        </AutoColumn>\n        <AutoColumn justify=\"center\">\n          <ThemedText.DeprecatedBlack>\n            {noLiquidity && price\n              ? '100'\n              : (poolTokenPercentage?.lessThan(ONE_BIPS) ? '<0.01' : poolTokenPercentage?.toFixed(2)) ?? '0'}\n            %\n          </ThemedText.DeprecatedBlack>\n          <Text fontWeight={535} fontSize={14} color={theme.neutral2} pt={1}>\n            <Trans>Share of pool</Trans>\n          </Text>\n        </AutoColumn>\n      </AutoRow>\n    </AutoColumn>\n  )\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport type { TransactionResponse } from '@ethersproject/providers'\nimport { Trans } from '@lingui/macro'\nimport { Currency, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { useToggleAccountDrawer } from 'components/AccountDrawer'\nimport UnsupportedCurrencyFooter from 'components/swap/UnsupportedCurrencyFooter'\nimport { SwitchLocaleLink } from 'components/SwitchLocaleLink'\nimport { V2Unsupported } from 'components/V2Unsupported'\nimport { useNetworkSupportsV2 } from 'hooks/useNetworkSupportsV2'\nimport { useCallback, useState } from 'react'\nimport { Plus } from 'react-feather'\nimport { useLocation, useNavigate, useParams } from 'react-router-dom'\nimport { Text } from 'rebass'\nimport styled, { useTheme } from 'styled-components'\nimport { ThemedText } from 'theme/components'\n\nimport { ButtonError, ButtonLight, ButtonPrimary } from '../../components/Button'\nimport { BlueCard, LightCard } from '../../components/Card'\nimport { AutoColumn, ColumnCenter } from '../../components/Column'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport DoubleCurrencyLogo from '../../components/DoubleLogo'\nimport { AddRemoveTabs } from '../../components/NavigationTabs'\nimport { MinimalPositionCard } from '../../components/PositionCard'\nimport Row, { AutoRow, RowBetween, RowFlat } from '../../components/Row'\nimport TransactionConfirmationModal, { ConfirmationModalContent } from '../../components/TransactionConfirmationModal'\nimport { ZERO_PERCENT } from '../../constants/misc'\nimport { WRAPPED_NATIVE_CURRENCY } from '../../constants/tokens'\nimport { useCurrency } from '../../hooks/Tokens'\nimport { ApprovalState, useApproveCallback } from '../../hooks/useApproveCallback'\nimport { useV2RouterContract } from '../../hooks/useContract'\nimport { useIsSwapUnsupported } from '../../hooks/useIsSwapUnsupported'\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline'\nimport { PairState } from '../../hooks/useV2Pairs'\nimport { Field } from '../../state/mint/actions'\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState } from '../../state/mint/hooks'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { TransactionInfo, TransactionType } from '../../state/transactions/types'\nimport { useUserSlippageToleranceWithDefault } from '../../state/user/hooks'\nimport { calculateGasMargin } from '../../utils/calculateGasMargin'\nimport { calculateSlippageAmount } from '../../utils/calculateSlippageAmount'\nimport { currencyId } from '../../utils/currencyId'\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\nimport AppBody from '../AppBody'\nimport { Dots, Wrapper } from '../Pool/styled'\nimport { ConfirmAddModalBottom } from './ConfirmAddModalBottom'\nimport { PoolPriceBar } from './PoolPriceBar'\n\nconst DEFAULT_ADD_V2_SLIPPAGE_TOLERANCE = new Percent(50, 10_000)\n\nconst AddLiquidityHeaderContainer = styled(AutoColumn)`\n  gap: 20px;\n  margin-bottom: 16px;\n`\n\nexport default function AddLiquidity() {\n  const { currencyIdA, currencyIdB } = useParams<{ currencyIdA?: string; currencyIdB?: string }>()\n  const navigate = useNavigate()\n  const { account, chainId, provider } = useWeb3React()\n\n  const theme = useTheme()\n\n  const currencyA = useCurrency(currencyIdA)\n  const currencyB = useCurrency(currencyIdB)\n\n  const wrappedNativeCurrency = chainId ? WRAPPED_NATIVE_CURRENCY[chainId] : undefined\n\n  const oneCurrencyIsWETH = Boolean(\n    chainId &&\n      wrappedNativeCurrency &&\n      ((currencyA && currencyA.equals(wrappedNativeCurrency)) || (currencyB && currencyB.equals(wrappedNativeCurrency)))\n  )\n\n  const toggleWalletDrawer = useToggleAccountDrawer() // toggle wallet when disconnected\n\n  // mint state\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n  const {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error,\n  } = useDerivedMintInfo(currencyA ?? undefined, currencyB ?? undefined)\n\n  const { onFieldAInput, onFieldBInput } = useMintActionHandlers(noLiquidity)\n\n  const isValid = !error\n\n  // modal and loading\n  const [showConfirm, setShowConfirm] = useState<boolean>(false)\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false) // clicked confirm\n\n  // txn values\n  const deadline = useTransactionDeadline() // custom from users settings\n  const allowedSlippage = useUserSlippageToleranceWithDefault(DEFAULT_ADD_V2_SLIPPAGE_TOLERANCE) // custom from users\n  const [txHash, setTxHash] = useState<string>('')\n\n  // get formatted amounts\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: noLiquidity ? otherTypedValue : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\n  }\n\n  // get the max amounts user can add\n  const maxAmounts: { [field in Field]?: CurrencyAmount<Currency> } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmountSpend(currencyBalances[field]),\n      }\n    },\n    {}\n  )\n\n  const atMaxAmounts: { [field in Field]?: CurrencyAmount<Currency> } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmounts[field]?.equalTo(parsedAmounts[field] ?? '0'),\n      }\n    },\n    {}\n  )\n\n  const router = useV2RouterContract()\n\n  // check whether the user has approved the router on the tokens\n  const [approvalA, approveACallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_A], router?.address)\n  const [approvalB, approveBCallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_B], router?.address)\n\n  const addTransaction = useTransactionAdder()\n  const networkSupportsV2 = useNetworkSupportsV2()\n\n  async function onAdd() {\n    if (!chainId || !provider || !account || !router || !networkSupportsV2) return\n\n    const { [Field.CURRENCY_A]: parsedAmountA, [Field.CURRENCY_B]: parsedAmountB } = parsedAmounts\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB || !deadline) {\n      return\n    }\n\n    const amountsMin = {\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? ZERO_PERCENT : allowedSlippage)[0],\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? ZERO_PERCENT : allowedSlippage)[0],\n    }\n\n    let estimate,\n      method: (...args: any) => Promise<TransactionResponse>,\n      args: Array<string | string[] | number>,\n      value: BigNumber | null\n    if (currencyA.isNative || currencyB.isNative) {\n      const tokenBIsETH = currencyB.isNative\n      estimate = router.estimateGas.addLiquidityETH\n      method = router.addLiquidityETH\n      args = [\n        (tokenBIsETH ? currencyA : currencyB)?.wrapped?.address ?? '', // token\n        (tokenBIsETH ? parsedAmountA : parsedAmountB).quotient.toString(), // token desired\n        amountsMin[tokenBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(), // token min\n        amountsMin[tokenBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(), // eth min\n        account,\n        deadline.toHexString(),\n      ]\n      value = BigNumber.from((tokenBIsETH ? parsedAmountB : parsedAmountA).quotient.toString())\n    } else {\n      estimate = router.estimateGas.addLiquidity\n      method = router.addLiquidity\n      args = [\n        currencyA?.wrapped?.address ?? '',\n        currencyB?.wrapped?.address ?? '',\n        parsedAmountA.quotient.toString(),\n        parsedAmountB.quotient.toString(),\n        amountsMin[Field.CURRENCY_A].toString(),\n        amountsMin[Field.CURRENCY_B].toString(),\n        account,\n        deadline.toHexString(),\n      ]\n      value = null\n    }\n\n    setAttemptingTxn(true)\n    await estimate(...args, value ? { value } : {})\n      .then((estimatedGasLimit) =>\n        method(...args, {\n          ...(value ? { value } : {}),\n          gasLimit: calculateGasMargin(estimatedGasLimit),\n        }).then((response) => {\n          setAttemptingTxn(false)\n\n          const transactionInfo: TransactionInfo = {\n            type: TransactionType.ADD_LIQUIDITY_V2_POOL,\n            baseCurrencyId: currencyId(currencyA),\n            expectedAmountBaseRaw: parsedAmounts[Field.CURRENCY_A]?.quotient.toString() ?? '0',\n            quoteCurrencyId: currencyId(currencyB),\n            expectedAmountQuoteRaw: parsedAmounts[Field.CURRENCY_B]?.quotient.toString() ?? '0',\n          }\n\n          addTransaction(response, transactionInfo)\n\n          setTxHash(response.hash)\n        })\n      )\n      .catch((error) => {\n        setAttemptingTxn(false)\n        // we only care if the error is something _other_ than the user rejected the tx\n        if (error?.code !== 4001) {\n          console.error(error)\n        }\n      })\n  }\n\n  const modalHeader = () => {\n    return (\n      <AddLiquidityHeaderContainer>\n        {noLiquidity ? (\n          <LightCard mt=\"20px\" $borderRadius=\"20px\">\n            <AutoRow justify=\"space-between\">\n              <Text fontSize=\"24px\" fontWeight={535} lineHeight=\"42px\" marginRight={10}>\n                {currencies[Field.CURRENCY_A]?.symbol + '/' + currencies[Field.CURRENCY_B]?.symbol}\n              </Text>\n              <DoubleCurrencyLogo\n                currency0={currencies[Field.CURRENCY_A]}\n                currency1={currencies[Field.CURRENCY_B]}\n                size={30}\n              />\n            </AutoRow>\n          </LightCard>\n        ) : (\n          <>\n            <RowFlat style={{ marginTop: '20px' }}>\n              <Text fontSize=\"48px\" fontWeight={535} lineHeight=\"42px\" marginRight={10}>\n                {liquidityMinted?.toSignificant(6)}\n              </Text>\n              <DoubleCurrencyLogo\n                currency0={currencies[Field.CURRENCY_A]}\n                currency1={currencies[Field.CURRENCY_B]}\n                size={30}\n              />\n            </RowFlat>\n            <Row>\n              <Text fontSize=\"24px\">\n                {currencies[Field.CURRENCY_A]?.symbol + '/' + currencies[Field.CURRENCY_B]?.symbol + ' Pool Tokens'}\n              </Text>\n            </Row>\n            <ThemedText.DeprecatedItalic fontSize={12} textAlign=\"left\" padding=\"8px 0 0 0 \">\n              <Trans>\n                Output is estimated. If the price changes by more than {allowedSlippage.toSignificant(4)}% your\n                transaction will revert.\n              </Trans>\n            </ThemedText.DeprecatedItalic>\n          </>\n        )}\n      </AddLiquidityHeaderContainer>\n    )\n  }\n\n  const modalBottom = () => {\n    return (\n      <ConfirmAddModalBottom\n        price={price}\n        currencies={currencies}\n        parsedAmounts={parsedAmounts}\n        noLiquidity={noLiquidity}\n        onAdd={onAdd}\n        poolTokenPercentage={poolTokenPercentage}\n      />\n    )\n  }\n\n  const pendingText = (\n    <Trans>\n      Supplying {parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)} {currencies[Field.CURRENCY_A]?.symbol} and{' '}\n      {parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)} {currencies[Field.CURRENCY_B]?.symbol}\n    </Trans>\n  )\n\n  const handleCurrencyASelect = useCallback(\n    (currencyA: Currency) => {\n      const newCurrencyIdA = currencyId(currencyA)\n      if (newCurrencyIdA === currencyIdB) {\n        navigate(`/add/v2/${currencyIdB}/${currencyIdA}`)\n      } else {\n        navigate(`/add/v2/${newCurrencyIdA}/${currencyIdB}`)\n      }\n    },\n    [currencyIdB, navigate, currencyIdA]\n  )\n  const handleCurrencyBSelect = useCallback(\n    (currencyB: Currency) => {\n      const newCurrencyIdB = currencyId(currencyB)\n      if (currencyIdA === newCurrencyIdB) {\n        if (currencyIdB) {\n          navigate(`/add/v2/${currencyIdB}/${newCurrencyIdB}`)\n        } else {\n          navigate(`/add/v2/${newCurrencyIdB}`)\n        }\n      } else {\n        navigate(`/add/v2/${currencyIdA ? currencyIdA : 'ETH'}/${newCurrencyIdB}`)\n      }\n    },\n    [currencyIdA, navigate, currencyIdB]\n  )\n\n  const handleDismissConfirmation = useCallback(() => {\n    setShowConfirm(false)\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onFieldAInput('')\n    }\n    setTxHash('')\n  }, [onFieldAInput, txHash])\n\n  const { pathname } = useLocation()\n  const isCreate = pathname.includes('/create')\n\n  const addIsUnsupported = useIsSwapUnsupported(currencies?.CURRENCY_A, currencies?.CURRENCY_B)\n\n  if (!networkSupportsV2) return <V2Unsupported />\n\n  return (\n    <>\n      <AppBody>\n        <AddRemoveTabs creating={isCreate} adding={true} autoSlippage={DEFAULT_ADD_V2_SLIPPAGE_TOLERANCE} />\n        <Wrapper>\n          <TransactionConfirmationModal\n            isOpen={showConfirm}\n            onDismiss={handleDismissConfirmation}\n            attemptingTxn={attemptingTxn}\n            hash={txHash}\n            reviewContent={() => (\n              <ConfirmationModalContent\n                title={noLiquidity ? <Trans>You are creating a pool</Trans> : <Trans>You will receive</Trans>}\n                onDismiss={handleDismissConfirmation}\n                topContent={modalHeader}\n                bottomContent={modalBottom}\n              />\n            )}\n            pendingText={pendingText}\n            currencyToAdd={pair?.liquidityToken}\n          />\n          <AutoColumn gap=\"20px\">\n            {noLiquidity ||\n              (isCreate ? (\n                <ColumnCenter>\n                  <BlueCard>\n                    <AutoColumn gap=\"10px\">\n                      <ThemedText.DeprecatedLink fontWeight={535} color=\"accent1\">\n                        <Trans>You are the first liquidity provider.</Trans>\n                      </ThemedText.DeprecatedLink>\n                      <ThemedText.DeprecatedLink fontWeight={485} color=\"accent1\">\n                        <Trans>The ratio of tokens you add will set the price of this pool.</Trans>\n                      </ThemedText.DeprecatedLink>\n                      <ThemedText.DeprecatedLink fontWeight={485} color=\"accent1\">\n                        <Trans>Once you are happy with the rate click supply to review.</Trans>\n                      </ThemedText.DeprecatedLink>\n                    </AutoColumn>\n                  </BlueCard>\n                </ColumnCenter>\n              ) : (\n                <ColumnCenter>\n                  <BlueCard>\n                    <AutoColumn gap=\"10px\">\n                      <ThemedText.DeprecatedLink fontWeight={485} color=\"accent1\">\n                        <b>\n                          <Trans>Tip:</Trans>\n                        </b>{' '}\n                        <Trans>\n                          When you add liquidity, you will receive pool tokens representing your position. These tokens\n                          automatically earn fees proportional to your share of the pool, and can be redeemed at any\n                          time.\n                        </Trans>\n                      </ThemedText.DeprecatedLink>\n                    </AutoColumn>\n                  </BlueCard>\n                </ColumnCenter>\n              ))}\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.CURRENCY_A]}\n              onUserInput={onFieldAInput}\n              onMax={() => {\n                onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\n              }}\n              onCurrencySelect={handleCurrencyASelect}\n              showMaxButton={!atMaxAmounts[Field.CURRENCY_A]}\n              currency={currencies[Field.CURRENCY_A] ?? null}\n              id=\"add-liquidity-input-tokena\"\n              showCommonBases\n            />\n            <ColumnCenter>\n              <Plus size=\"16\" color={theme.neutral2} />\n            </ColumnCenter>\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.CURRENCY_B]}\n              onUserInput={onFieldBInput}\n              onCurrencySelect={handleCurrencyBSelect}\n              onMax={() => {\n                onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\n              }}\n              showMaxButton={!atMaxAmounts[Field.CURRENCY_B]}\n              currency={currencies[Field.CURRENCY_B] ?? null}\n              id=\"add-liquidity-input-tokenb\"\n              showCommonBases\n            />\n            {currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && (\n              <>\n                <LightCard padding=\"0px\" $borderRadius=\"20px\">\n                  <RowBetween padding=\"1rem\">\n                    <ThemedText.DeprecatedSubHeader fontWeight={535} fontSize={14}>\n                      {noLiquidity ? (\n                        <Trans>Initial prices and pool share</Trans>\n                      ) : (\n                        <Trans>Prices and pool share</Trans>\n                      )}\n                    </ThemedText.DeprecatedSubHeader>\n                  </RowBetween>{' '}\n                  <LightCard padding=\"1rem\" $borderRadius=\"20px\">\n                    <PoolPriceBar\n                      currencies={currencies}\n                      poolTokenPercentage={poolTokenPercentage}\n                      noLiquidity={noLiquidity}\n                      price={price}\n                    />\n                  </LightCard>\n                </LightCard>\n              </>\n            )}\n\n            {addIsUnsupported ? (\n              <ButtonPrimary disabled={true}>\n                <ThemedText.DeprecatedMain mb=\"4px\">\n                  <Trans>Unsupported asset</Trans>\n                </ThemedText.DeprecatedMain>\n              </ButtonPrimary>\n            ) : !account ? (\n              <ButtonLight onClick={toggleWalletDrawer}>\n                <Trans>Connect wallet</Trans>\n              </ButtonLight>\n            ) : (\n              <AutoColumn gap=\"md\">\n                {(approvalA === ApprovalState.NOT_APPROVED ||\n                  approvalA === ApprovalState.PENDING ||\n                  approvalB === ApprovalState.NOT_APPROVED ||\n                  approvalB === ApprovalState.PENDING) &&\n                  isValid && (\n                    <RowBetween>\n                      {approvalA !== ApprovalState.APPROVED && (\n                        <ButtonPrimary\n                          onClick={approveACallback}\n                          disabled={approvalA === ApprovalState.PENDING}\n                          width={approvalB !== ApprovalState.APPROVED ? '48%' : '100%'}\n                        >\n                          {approvalA === ApprovalState.PENDING ? (\n                            <Dots>\n                              <Trans>Approving {currencies[Field.CURRENCY_A]?.symbol}</Trans>\n                            </Dots>\n                          ) : (\n                            <Trans>Approve {currencies[Field.CURRENCY_A]?.symbol}</Trans>\n                          )}\n                        </ButtonPrimary>\n                      )}\n                      {approvalB !== ApprovalState.APPROVED && (\n                        <ButtonPrimary\n                          onClick={approveBCallback}\n                          disabled={approvalB === ApprovalState.PENDING}\n                          width={approvalA !== ApprovalState.APPROVED ? '48%' : '100%'}\n                        >\n                          {approvalB === ApprovalState.PENDING ? (\n                            <Dots>\n                              <Trans>Approving {currencies[Field.CURRENCY_B]?.symbol}</Trans>\n                            </Dots>\n                          ) : (\n                            <Trans>Approve {currencies[Field.CURRENCY_B]?.symbol}</Trans>\n                          )}\n                        </ButtonPrimary>\n                      )}\n                    </RowBetween>\n                  )}\n                <ButtonError\n                  onClick={() => {\n                    setShowConfirm(true)\n                  }}\n                  disabled={!isValid || approvalA !== ApprovalState.APPROVED || approvalB !== ApprovalState.APPROVED}\n                  error={!isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]}\n                >\n                  <Text fontSize={20} fontWeight={535}>\n                    {error ?? <Trans>Supply</Trans>}\n                  </Text>\n                </ButtonError>\n              </AutoColumn>\n            )}\n          </AutoColumn>\n        </Wrapper>\n      </AppBody>\n      <SwitchLocaleLink />\n\n      {!addIsUnsupported ? (\n        pair && !noLiquidity && pairState !== PairState.INVALID ? (\n          <AutoColumn style={{ minWidth: '20rem', width: '100%', maxWidth: '400px', marginTop: '1rem' }}>\n            <MinimalPositionCard showUnwrapped={oneCurrencyIsWETH} pair={pair} />\n          </AutoColumn>\n        ) : null\n      ) : (\n        <UnsupportedCurrencyFooter\n          show={addIsUnsupported}\n          currencies={[currencies.CURRENCY_A, currencies.CURRENCY_B]}\n        />\n      )}\n    </>\n  )\n}\n","import { Navigate, useParams } from 'react-router-dom'\n\nimport AddLiquidityV2 from './index'\n\nexport default function RedirectDuplicateTokenIdsV2() {\n  const { currencyIdA, currencyIdB } = useParams<{ currencyIdA: string; currencyIdB: string }>()\n\n  if (currencyIdA && currencyIdB && currencyIdA.toLowerCase() === currencyIdB.toLowerCase()) {\n    return <Navigate to={`/add/v2/${currencyIdA}`} replace />\n  }\n\n  return <AddLiquidityV2 />\n}\n","import { LoadingRows as BaseLoadingRows } from 'components/Loader/styled'\nimport { Text } from 'rebass'\nimport styled from 'styled-components'\n\nexport const Wrapper = styled.div`\n  position: relative;\n  padding: 20px;\n`\n\nexport const ClickableText = styled(Text)`\n  :hover {\n    cursor: pointer;\n  }\n  color: ${({ theme }) => theme.accent1};\n`\nexport const MaxButton = styled.button<{ width: string }>`\n  padding: 0.5rem 1rem;\n  background-color: ${({ theme }) => theme.accent2};\n  border: 1px solid ${({ theme }) => theme.accent2};\n  border-radius: 0.5rem;\n  font-size: 1rem;\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\n    padding: 0.25rem 0.5rem;\n  `};\n  font-weight: 535;\n  cursor: pointer;\n  margin: 0.25rem;\n  overflow: hidden;\n  color: ${({ theme }) => theme.accent1};\n  :hover {\n    border: 1px solid ${({ theme }) => theme.accent1};\n  }\n  :focus {\n    border: 1px solid ${({ theme }) => theme.accent1};\n    outline: none;\n  }\n`\n\nexport const Dots = styled.span`\n  &::after {\n    display: inline-block;\n    animation: ellipsis 1.25s infinite;\n    content: '.';\n    width: 1em;\n    text-align: left;\n  }\n  @keyframes ellipsis {\n    0% {\n      content: '.';\n    }\n    33% {\n      content: '..';\n    }\n    66% {\n      content: '...';\n    }\n  }\n`\n\nexport const LoadingRows = styled(BaseLoadingRows)`\n  padding-top: 36px;\n  min-width: 75%;\n  max-width: 960px;\n  grid-column-gap: 0.5em;\n  grid-row-gap: 0.8em;\n  grid-template-columns: repeat(3, 1fr);\n  padding: 8px;\n\n  & > div:nth-child(4n + 1) {\n    grid-column: 1 / 3;\n  }\n  & > div:nth-child(4n) {\n    grid-column: 3 / 4;\n    margin-bottom: 2em;\n  }\n`\n","import { Currency, CurrencyAmount, Fraction, Percent } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\n\nconst ONE = new Fraction(1, 1)\n\nexport function calculateSlippageAmount(value: CurrencyAmount<Currency>, slippage: Percent): [JSBI, JSBI] {\n  if (slippage.lessThan(0) || slippage.greaterThan(ONE)) throw new Error('Unexpected slippage')\n  return [value.multiply(ONE.subtract(slippage)).quotient, value.multiply(ONE.add(slippage)).quotient]\n}\n","import { Currency, CurrencyAmount, Price } from '@uniswap/sdk-core'\nimport { DEFAULT_LOCALE, SUPPORTED_LOCALES } from 'constants/locales'\n\ninterface FormatLocaleNumberArgs {\n  number: CurrencyAmount<Currency> | Price<Currency, Currency> | number\n  locale?: string | null\n  options?: Intl.NumberFormatOptions\n  sigFigs?: number\n  fixedDecimals?: number\n}\n\nexport default function formatLocaleNumber({\n  number,\n  locale,\n  sigFigs,\n  fixedDecimals,\n  options = {},\n}: FormatLocaleNumberArgs): string {\n  let localeArg: string | string[]\n  if (!locale || (locale && !SUPPORTED_LOCALES.includes(locale))) {\n    localeArg = DEFAULT_LOCALE\n  } else {\n    localeArg = [locale, DEFAULT_LOCALE]\n  }\n  options.minimumFractionDigits = options.minimumFractionDigits || fixedDecimals\n  options.maximumFractionDigits = options.maximumFractionDigits || fixedDecimals\n\n  // Fixed decimals should override significant figures.\n  options.maximumSignificantDigits = options.maximumSignificantDigits || fixedDecimals ? undefined : sigFigs\n\n  let numberString: number\n  if (typeof number === 'number') {\n    numberString = fixedDecimals ? parseFloat(number.toFixed(fixedDecimals)) : number\n  } else {\n    const baseString = parseFloat(number.toSignificant(sigFigs))\n    numberString = fixedDecimals ? parseFloat(baseString.toFixed(fixedDecimals)) : baseString\n  }\n\n  return numberString.toLocaleString(localeArg, options)\n}\n","import { Currency, CurrencyAmount, Fraction } from '@uniswap/sdk-core'\nimport { DEFAULT_LOCALE, SupportedLocale } from 'constants/locales'\nimport JSBI from 'jsbi'\nimport formatLocaleNumber from 'lib/utils/formatLocaleNumber'\n\nexport function formatCurrencyAmount(\n  amount: CurrencyAmount<Currency> | undefined,\n  sigFigs: number,\n  locale: SupportedLocale = DEFAULT_LOCALE,\n  fixedDecimals?: number\n): string {\n  if (!amount) {\n    return '-'\n  }\n\n  if (JSBI.equal(amount.quotient, JSBI.BigInt(0))) {\n    return '0'\n  }\n\n  if (amount.divide(amount.decimalScale).lessThan(new Fraction(1, 100000))) {\n    return `<${formatLocaleNumber({ number: 0.00001, locale })}`\n  }\n\n  return formatLocaleNumber({ number: amount, locale, sigFigs, fixedDecimals })\n}\n","import { Currency } from '@uniswap/sdk-core'\nimport { asSupportedChain } from 'constants/chains'\n\nimport { nativeOnChain, WRAPPED_NATIVE_CURRENCY } from '../constants/tokens'\n\nexport function unwrappedToken(currency: Currency): Currency {\n  if (currency.isNative) return currency\n  const formattedChainId = asSupportedChain(currency.chainId)\n  if (formattedChainId && WRAPPED_NATIVE_CURRENCY[formattedChainId]?.equals(currency))\n    return nativeOnChain(currency.chainId)\n  return currency\n}\n"],"names":["DetailsFooter","styled","div","theme","neutral2","surface2","Z_INDEX","deprecated_zero","show","StyledButtonEmpty","ButtonEmpty","AddressText","ThemedText","DeprecatedBlue","deprecated_mediaWidth","deprecated_upToSmall","UnsupportedCurrencyFooter","currencies","chainId","useWeb3React","showDetails","setShowDetails","useState","tokens","map","currency","wrapped","unsupportedTokens","useUnsupportedTokens","Modal","isOpen","onDismiss","Card","padding","AutoColumn","gap","RowBetween","DeprecatedMediumHeader","CloseIcon","onClick","data-testid","token","Object","keys","includes","address","OutlineCard","AutoRow","align","CurrencyLogo","size","DeprecatedBody","fontWeight","symbol","ExternalLink","href","getExplorerLink","ExplorerDataType","ADDRESS","concat","ZERO","JSBI","useMintState","useAppSelector","state","mint","ConfirmAddModalBottom","noLiquidity","price","parsedAmounts","poolTokenPercentage","onAdd","Field","CURRENCY_A","RowFixed","style","marginRight","toSignificant","CURRENCY_B","justifyContent","invert","ButtonPrimary","margin","Text","fontSize","PoolPriceBar","useTheme","invertedPrice","error","undefined","justify","DeprecatedBlack","color","pt","lessThan","ONE_BIPS","toFixed","DEFAULT_ADD_V2_SLIPPAGE_TOLERANCE","Percent","AddLiquidityHeaderContainer","AddLiquidity","currencyIdA","currencyIdB","useParams","navigate","useNavigate","account","provider","currencyA","useCurrency","currencyB","wrappedNativeCurrency","WRAPPED_NATIVE_CURRENCY","oneCurrencyIsWETH","Boolean","equals","toggleWalletDrawer","useToggleAccountDrawer","independentField","typedValue","otherTypedValue","dependentField","pair","pairState","currencyBalances","liquidityMinted","useMemo","useV2Pair","totalSupply","useTotalSupply","liquidityToken","PairState","NOT_EXISTS","quotient","EXISTS","reserve0","reserve1","balances","useCurrencyBalances","independentAmount","tryParseCurrencyAmount","dependentAmount","wrappedIndependentAmount","tokenA","tokenB","dependentCurrency","dependentTokenAmount","priceOf","quote","isNative","CurrencyAmount","fromRawAmount","wrappedCurrencyA","currencyAAmount","currencyBAmount","greaterThan","value","divide","Price","denominator","numerator","tokenAmountA","tokenAmountB","getLiquidityMinted","console","add","INVALID","useDerivedMintInfo","onFieldAInput","onFieldBInput","dispatch","useAppDispatch","useCallback","typeInput","field","useMintActionHandlers","isValid","showConfirm","setShowConfirm","attemptingTxn","setAttemptingTxn","deadline","useTransactionDeadline","allowedSlippage","useUserSlippageToleranceWithDefault","txHash","setTxHash","formattedAmounts","maxAmounts","reduce","accumulator","maxAmountSpend","atMaxAmounts","equalTo","router","useV2RouterContract","approvalA","approveACallback","useApproveCallback","approvalB","approveBCallback","addTransaction","useTransactionAdder","networkSupportsV2","useNetworkSupportsV2","async","parsedAmountA","parsedAmountB","amountsMin","calculateSlippageAmount","ZERO_PERCENT","estimate","method","args","tokenBIsETH","estimateGas","addLiquidityETH","toString","toHexString","BigNumber","from","addLiquidity","then","estimatedGasLimit","gasLimit","calculateGasMargin","response","transactionInfo","type","TransactionType","ADD_LIQUIDITY_V2_POOL","baseCurrencyId","currencyId","expectedAmountBaseRaw","quoteCurrencyId","expectedAmountQuoteRaw","hash","catch","code","modalHeader","LightCard","mt","$borderRadius","lineHeight","DoubleCurrencyLogo","currency0","currency1","RowFlat","marginTop","Row","DeprecatedItalic","textAlign","modalBottom","pendingText","handleCurrencyASelect","newCurrencyIdA","handleCurrencyBSelect","newCurrencyIdB","handleDismissConfirmation","pathname","useLocation","isCreate","addIsUnsupported","useIsSwapUnsupported","AppBody","AddRemoveTabs","creating","adding","autoSlippage","Wrapper","TransactionConfirmationModal","reviewContent","ConfirmationModalContent","title","topContent","bottomContent","currencyToAdd","ColumnCenter","BlueCard","DeprecatedLink","b","CurrencyInputPanel","onUserInput","onMax","toExact","onCurrencySelect","showMaxButton","id","showCommonBases","Plus","DeprecatedSubHeader","disabled","DeprecatedMain","mb","ApprovalState","NOT_APPROVED","PENDING","APPROVED","width","Dots","ButtonError","ButtonLight","SwitchLocaleLink","minWidth","maxWidth","MinimalPositionCard","showUnwrapped","V2Unsupported","RedirectDuplicateTokenIdsV2","toLowerCase","Navigate","to","replace","AddLiquidityV2","ClickableText","accent1","MaxButton","button","accent2","span","LoadingRows","BaseLoadingRows","ONE","Fraction","slippage","Error","multiply","subtract","formatLocaleNumber","number","locale","sigFigs","fixedDecimals","options","localeArg","numberString","SUPPORTED_LOCALES","DEFAULT_LOCALE","minimumFractionDigits","maximumFractionDigits","maximumSignificantDigits","parseFloat","baseString","toLocaleString","formatCurrencyAmount","amount","decimalScale","unwrappedToken","formattedChainId","asSupportedChain","nativeOnChain"],"sourceRoot":""}